{"version":3,"file":"grab-api.cjs.js","sources":["../src/log.ts","../src/grab-api.ts"],"sourcesContent":["\n/**\n * ### Colorized Log With JSON Structure\n * ![Debug log](https://i.imgur.com/R8Qp6Vg.png)  \n * Logs messages to the console with custom styling,\n * prints JSON with description of structure layout, \n * and showing debug output in development only.\n * @param {string|object} message - The message to log. If an object is provided, it will be stringified.\n * @param {boolean} [hideInProduction] -  default = auto-detects based on hostname.\n *  If true, uses `console.debug` (hidden in production). If false, uses `console.log`.\n * @param {string} [style] default='color: blue; font-size: 15px' - CSS style string \n */\nexport function log(\n  message,\n  hideInProduction = undefined,\n  style = \"color: blue; font-size: 12pt;\"\n) {\n  // Auto-detect if we should hide logs in production based on hostname\n  if (typeof hideInProduction === \"undefined\")\n    hideInProduction = typeof window !== \"undefined\" && window?.location.hostname.includes(\"localhost\");\n\n  // For objects, print both the structure visualization and full JSON\n  if (typeof message === \"object\")\n    message =\n      printStructureJSON(message) + \"\\n\\n\" + JSON.stringify(message, null, 2);\n\n  // Use console.debug for production-hidden logs, console.log otherwise\n  if (hideInProduction) console.debug((style ? \"%c\" : \"\") + message, style);\n  else console.log((style ? \"%c\" : \"\") + message, style);\n}\n\n\n// ANSI escape codes for terminal colors when running in Node.js\n// Each color is mapped to a specific data type for consistent visualization\nconst colors = {\n  reset: \"\\x1b[0m\",      // Reset to default color\n  yellow: \"\\x1b[33m\",    // Used for strings\n  cyan: \"\\x1b[36m\",      // Used for numbers\n  magenta: \"\\x1b[35m\",   // Used for booleans\n  gray: \"\\x1b[90m\",      // Used for null values\n  green: \"\\x1b[32m\",     // Used for object braces\n  blue: \"\\x1b[34m\",      // Used for array brackets\n  red: \"\\x1b[31m\",       // Used for functions\n  white: \"\\x1b[37m\",     // Default color\n};\n\n/**\n * Determines the appropriate color code for a given value type\n * Used for consistent color coding in the structure visualization\n */\nfunction getColorForType(value) {\n  if (typeof value === \"string\") return colors.yellow;\n  if (typeof value === \"number\") return colors.cyan;\n  if (typeof value === \"boolean\") return colors.magenta;\n  if (typeof value === \"function\") return colors.red;\n  if (value === null) return colors.gray;\n  if (Array.isArray(value)) return colors.blue;\n  if (typeof value === \"object\") return colors.green;\n  return colors.white;\n}\n\n/**\n * Returns a string representation of the value's type\n * Used to show simplified type information in the structure visualization\n */\nfunction getTypeString(value) {\n  if (typeof value === \"string\") return '\"\"';\n  if (typeof value === \"number\") return \"number\";\n  if (typeof value === \"boolean\") return \"bool\";\n  if (typeof value === \"function\") return \"function\";\n  if (value === null) return \"null\";\n  if (Array.isArray(value)) {\n    if (value.length)\n      return \"[\" + getTypeString(value[0]) + \"]\";\n    else\n      return \"[]\";\n  }\n  if (typeof value === \"object\") return \"{...}\";\n  return typeof value;\n}\n\n/**\n * Creates a colored visualization of a JSON object's structure\n * Shows the shape and types of the data rather than actual values\n * Recursively processes nested objects and arrays\n */\nexport function printStructureJSON(obj, indent = 0) {\n  const pad = \"  \".repeat(indent);\n\n  // Handle primitive values and null\n  if (typeof obj !== \"object\" || obj === null) {\n    const color = getColorForType(obj);\n    return color + getTypeString(obj) + colors.reset;\n  }\n\n  // Handle arrays with special bracket formatting\n  if (Array.isArray(obj)) {\n    let result = colors.blue + \"[\" + colors.reset;\n    if (obj.length) result += \"\\n\";\n    obj.forEach((item, idx) => {\n      result += pad + \"  \" + printStructureJSON(item, indent + 1);\n      if (idx < obj.length - 1) result += \",\";\n      result += \"\\n\";\n    });\n    result += pad + colors.blue + \"]\" + colors.reset;\n    return result;\n  }\n\n  // Handle objects with special brace and property formatting\n  let result = colors.green + \"{\" + colors.reset;\n  const keys = Object.keys(obj);\n  if (keys.length) result += \"\\n\";\n  keys.forEach((key, index) => {\n    const value = obj[key];\n    const color = getColorForType(value);\n    result += pad + \"  \";\n    \n    // Handle nested objects recursively\n    if (typeof value === \"object\" && value !== null && !Array.isArray(value)) {\n      result += color + key + colors.reset + \": \" + printStructureJSON(value, indent + 1);\n    } \n    // Handle nested arrays recursively\n    else if (Array.isArray(value)) {\n      result += color + key + colors.reset + \": \" + printStructureJSON(value, indent + 1);\n    } \n    // Handle primitive values\n    else {\n      result += color + key + \": \" + getTypeString(value) + colors.reset;\n    }\n    if (index < keys.length - 1) result += \",\";\n    result += \"\\n\";\n  });\n  result += pad + colors.green + \"}\" + colors.reset;\n  \n  // Only log at top level of recursion\n  if (indent === 0) {\n    // console.log(result);\n  }\n  return result;\n}\n\n\n/**\n * Shows message in a modal overlay with scrollable message stack\n * and is easier to dismiss unlike alert() which blocks window.\n * Creates a semi-transparent overlay with a white box containing the message.\n * @param {string} msg - The message to display\n */\nexport function showAlert(msg) {\n  let o = document.getElementById('alert-overlay'), list;\n  \n  // Create overlay and alert box if they don't exist\n  if (!o) {\n    o = document.body.appendChild(document.createElement('div'));\n    o.id = 'alert-overlay';\n    o.setAttribute('style', \"position:fixed;inset:0;z-index:9999;background:rgba(0,0,0,0.5);display:flex;align-items:center;justify-content:center\");\n    o.innerHTML = `<div id=\"alert-box\" style=\"background:#fff;padding:1.5em 2em;border-radius:8px;box-shadow:0 2px 16px #0003;min-width:220px;max-height:80vh;position:relative;display:flex;flex-direction:column;\">\n      <button id=\"close-alert\" style=\"position:absolute;top:12px;right:20px;font-size:1.5em;background:none;border:none;cursor:pointer;color:black;\">&times;</button>\n      <div id=\"alert-list\" style=\"overflow:auto;flex:1;\"></div>\n    </div>`;\n    \n    // Add click handlers to close overlay\n    o.addEventListener('click', (e) => e.target == o && o.remove());\n    document.getElementById('close-alert').onclick = () => o.remove();\n    list = o.querySelector('#alert-list');\n  } else {\n    list = o.querySelector('#alert-list');\n  }\n  \n  // Add new message to list\n  list.innerHTML += `<div style=\"border-bottom:1px solid #333; font-size:1.2em;margin:0.5em 0;\">${msg}</div>`;\n}\n\n\n/**\n * Sets up development tools for debugging API requests\n * Adds a keyboard shortcut (Ctrl+I) that shows a modal with request history\n * Each request entry shows:\n * - Request path\n * - Request details\n * - Response data\n * - Timestamp\n */\nexport function setupDevTools() {\n  // Keyboard shortcut (Ctrl+I) to toggle debug view\n  document.addEventListener(\"keydown\", (e) => {\n    if (e.key === \"i\" && e.ctrlKey) {\n      // Create HTML of the grab.log requests\n      let html = \" \";\n      for (let request of grab.log) {\n        html += `<div style=\"margin-bottom:1em; border-bottom:1px solid #ccc; padding-bottom:1em;\">\n          <b>Path:</b> ${request.path}<br>\n          <b>Request:</b> ${request.request}<br>\n          <b>Response:</b> ${JSON.stringify(request.response, null, 2)}<br>\n          <b>Time:</b> ${new Date(request.lastFetchTime).toLocaleString()}\n        </div>`;\n      }\n      showAlert(html);\n  }\n});\n}","import { printStructureJSON, log, showAlert, setupDevTools } from \"./log.js\";\n\n/**\n * TODO\n *  - pagination working\n *  - react tests\n *  - progress\n *  - grab error popup and dev tool\n *  - tests in stackblitz\n *  - loading icons\n *  - repeat every\n *  - show net log in alert\n *  - cache revalidation\n *  - refetch on stale, on window refocus, on network\n *  - scroll position recovery\n */\n\n/**\n * ### GRAB: Generate Request to API from Browser\n * ![GrabAPILogo](https://i.imgur.com/qrQWkeb.png)\n * **GRAB is the FBEST Request Manager: Functionally Brilliant, Elegantly Simple Tool**\n * 1. **One Function**: 3Kb min, 0 dependencies, minimalist syntax, [more features than top alternatives](https://grab.js.org/guide/Comparisons)\n * 2. **Auto-JSON Convert**: Pass parameters and get response or error in JSON, handling other data types as is.\n * 3. **isLoading Status**: Sets `.isLoading=true` on the pre-initialized response object so you can show a \"Loading...\" in any framework\n * 4. **Debug Logging**: Adds global `log()` and prints colored JSON structure, response, timing for requests in test.\n * 5. **Mock Server Support**: Configure `window.grab.mock` for development and testing environments\n * 6. **Cancel Duplicates**: Prevent this request if one is ongoing to same path & params, or cancel the ongoing request.\n * 7. **Timeout & Retry**: Customizable request timeout, default 30s, and auto-retry on error\n * 8. **DevTools**: `Ctrl+I` overlays webpage with devtools showing all requests and responses, timing, and JSON structure.\n * 9. **Request History**: Stores all request and response data in global `grab.log` object\n * 10. **Pagination Infinite Scroll**: Built-in pagination for infinite scroll to auto-load and merge next result page, with scroll position recovery.\n * 11. **Base URL Based on Environment**: Configure `grab.defaults.baseURL` once at the top, overide with `SERVER_API_URL` in `.env`.\n * 12. **Frontend Cache**: Set cache headers and retrieve from frontend memory for repeat requests to static data.\n * 13. **Regrab On Error**: Regrab on timeout error, or on window refocus, or on network change, or on stale data.\n * 14. **Framework Agnostic**: Alternatives like TanStack work only in component initialization and depend on React & others.\n * 15. **Globals**: Adds to window in browser or global in Node.js so you only import once: `grab()`, `log()`, `grab.log`, `grab.mock`, `grab.defaults`\n * 16. **TypeScript Tooltips**: Developers can hover over option names and autocomplete TypeScript.\n * 17. **Request Stategies**: [🎯 Examples](https://grab.js.org/guide/Examples) show common stategies like debounce, repeat, proxy, unit tests, interceptors, file upload, etc\n * 18. **Rate Limiting**: Built-in rate limiting to prevent multi-click cascading responses, require to wait seconds between requests.\n * 19. **Repeat**: Repeat request this many times, or repeat every X seconds to poll for updates.\n * 20. **Loading Icons**: Import from `grab-api.js/icons` to get enhanced animated loading icons.\n *\n * @param {string} path The full URL path OR relative path on this server after `grab.defaults.baseURL`\n * @param {object} [options={}] Request params for GET or body for POST/PUT/PATCH and utility options\n * @param {string} [options.method] default=\"GET\" The HTTP method to use\n * @param {object} [options.response] Pre-initialized object which becomes response JSON, no need for `.data`.\n *  isLoading and error may also be set on this object. May omit and use return if load status is not needed.\n * @param {boolean} [options.cancelOngoingIfNew]  default=false Cancel previous requests to same path\n * @param {boolean} [options.cancelNewIfOngoing] default=false Cancel if a request to path is in progress\n * @param {boolean} [options.cache] default=false Whether to cache the request and from frontend cache\n * @param {boolean} [options.debug] default=false Whether to log the request and response\n * @param {number} [options.timeout] default=30 The timeout for the request in seconds\n * @param {number} [options.cacheForTime] default=60 Seconds to consider data stale and invalidate cache\n * @param {number} [options.rateLimit] default=0 If set, how many seconds to wait between requests\n * @param {string} [options.baseURL] default='/api/' base url prefix, override with SERVER_API_URL env\n * @param {boolean} [options.setDefaults] default=false Pass this with options to set\n *  those options as defaults for all requests.\n * @param {number} [options.retryAttempts] default=0 Retry failed requests this many times\n * @param {array} [options.infiniteScroll] default=null [page key, response field to concatenate, element with results]\n * @param {number} [options.repeat] default=0 Repeat request this many times\n * @param {number} [options.repeatEvery] default=null Repeat request every seconds\n * @param {function} [options.logger] default=log Custom logger to override the built-in color JSON log()\n * @param {function} [options.onBeforeRequest] Set with defaults to modify each request data.\n *  Takes and returns in order: path, response, params, fetchParams\n * @param {function} [options.onAfterRequest] Set with defaults to modify each request data.\n *  Takes and returns in order: path, response, params, fetchParams\n * @param {number} [options.debounce] default=0 Seconds to debounce request, wait to execute so that other requests may override\n * @param {boolean} [options.regrabOnStale] default=false Refetch when cache is past cacheForTime\n * @param {boolean} [options.regrabOnFocus] default=false Refetch on window refocus\n * @param {boolean} [options.regrabOnNetwork] default=false Refetch on network change\n * @param {any} [...params] All other params become GET params, POST body, and other methods.\n * @returns {Promise<Object>} The response object with resulting data or .error if error.\n * @author [vtempest (2025)](https://github.com/vtempest/grab-api)\n * @see  [🎯 Examples](https://grab.js.org/guide/Examples) [📑 Docs](https://grab.js.org)\n * @example import grab from 'grab-api.js';\n * let res = {};\n * await grab('search', {\n *   response: res,\n *   query: \"search words\"\n * })\n */\nexport default async function grab(path: string, options: GrabOptions) {\n  let {\n    headers,\n    response = {}, // Pre-initialized object to set the response in. isLoading and error are also set on this object.\n    method = options.post // set post: true for POST, omit for GET\n      ? \"POST\"\n      : options.put\n        ? \"PUT\"\n        : options.patch\n          ? \"PATCH\"\n          : \"GET\",\n    cache = false, // Enable/disable frontend caching\n    cacheForTime = 60, // Seconds to consider data stale and invalidate cache\n    timeout = 30, // Request timeout in seconds\n    baseURL = (typeof process !== \"undefined\" && process.env.SERVER_API_URL) ||\n    \"/api/\", // Use env var or default to /api/\n    cancelOngoingIfNew = false, // Cancel previous request for same path\n    cancelNewIfOngoing = false, // Don't make new request if one is ongoing\n    rateLimit = 0, // Minimum seconds between requests\n    debug = false, // Auto-enable debug on localhost\n    // typeof window !== \"undefined\" && window?.location?.hostname?.includes(\"localhost\"), \n    infiniteScroll = null, // page key, response field to concatenate, element with results\n    setDefaults = false, // Set these options as defaults for future requests\n    retryAttempts = 0, // Retry failed requests once\n    logger = log, // Custom logger to override the built-in color JSON log()\n    onBeforeRequest = null, // Hook to modify request data before request is made\n    onAfterRequest = null, // Hook to modify request data after request is made\n    onError = null, // Hook to modify request data after request is made\n    repeatEvery = null, // Repeat request every seconds\n    repeat = 0, // Repeat request this many times\n    debounce = 0, // Seconds to debounce request, wait to execute so that other requests may override\n    regrabOnStale = false, // Refetch when cache is past cacheForTime\n    regrabOnFocus = false, // Refetch on window refocus\n    regrabOnNetwork = false, // Refetch on network change\n    post = false,\n    put = false,\n    patch = false,\n    body = null,\n    ...params // All other params become request params/query\n  } = {\n    // Destructure options with defaults, merging with any globally set defaults\n    ...(typeof window !== \"undefined\" ? window?.grab?.defaults : global?.grab?.defaults || {}),\n    ...options,\n  };\n  try {\n\n    //handle debounce\n    if (debounce > 0) {\n      return await debouncer(async () => {\n        await grab(path, { ...options, debounce: 0 });\n      }, debounce * 1000);\n    }\n\n    // Handle repeat options:\n    // - repeat: Makes the same request multiple times sequentially\n    // - repeatEvery: Makes the request periodically on an interval\n    if (repeat > 1) {\n      for (let i = 0; i < repeat; i++) {\n        await grab(path, { ...options, repeat: 0 });\n      }\n      return response;\n    }\n    if (repeatEvery) {\n      setInterval(async () => {\n        await grab(path, { ...options, repeat: 0, repeatEvery: null });\n      }, repeatEvery * 1000);\n      return response;\n    }\n\n    // Store the provided options as new defaults if setDefaults flag is set\n    // This allows configuring default options that apply to all future requests\n    if (options?.setDefaults) {\n      if (typeof window !== \"undefined\")\n        window.grab.defaults = { ...options, setDefaults: undefined };\n      else if (typeof (global || globalThis).grab !== \"undefined\")\n        (global || globalThis).grab.defaults = { ...options, setDefaults: undefined };\n\n      return {};\n    }\n\n    // regrab on stale, on window refocus, on network\n    if (regrabOnStale && cache)\n      setTimeout(async () => {\n        await grab(path, { ...options, cache: false });\n      }, 1000 * cacheForTime);\n\n    if (regrabOnFocus) {\n      window.addEventListener(\"focus\", async () => {\n        await grab(path, { ...options, cache: false });\n      });\n      document.addEventListener(\"visibilitychange\", async () => {\n        if (document.visibilityState === \"visible\") {\n          await grab(path, { ...options, cache: false });\n        }\n      });\n    }\n    if (regrabOnNetwork)\n      window.addEventListener(\"online\", async () => {\n        if (document.visibilityState === \"visible\") {\n          await grab(path, { ...options, cache: false });\n        }\n      });\n\n    // Handle response parameter which can be either an object to populate\n    // or a function to call with results (e.g. React setState)\n    let resFunction = typeof response === \"function\" ? response : null;\n    if (!response || resFunction) response = {};\n\n    var [paginateKey, paginateResult, paginateElement] = infiniteScroll || [];\n\n    // Configure infinite scroll behavior if enabled\n    // Attaches scroll listener to specified element that triggers next page load\n    if (infiniteScroll?.length && typeof window == \"undefined\") {\n      let paginateDOM =\n        typeof paginateElement === \"string\"\n          ? document.querySelector(paginateElement)\n          : paginateElement;\n\n      if (paginateDOM)\n        paginateDOM.removeEventListener(\"scroll\", (window ?? globalThis)?.scrollListener);\n\n      // Your modified scroll listener with position saving\n      (window ?? globalThis).scrollListener = paginateDOM.addEventListener(\n        \"scroll\",\n        async ({ target }: { target: EventTarget }) => {\n          // Save scroll position whenever user scrolls\n          const t = target as HTMLElement;\n\n          localStorage.setItem(\n            \"scroll\",\n            JSON.stringify([t.scrollTop, t.scrollLeft, paginateElement])\n          );\n\n          if (t.scrollHeight - t.scrollTop <= t.clientHeight + 200) {\n            await grab(path, {\n              ...options,\n              cache: false,\n              [paginateKey]: priorRequest?.currentPage + 1,\n            });\n          }\n        }\n      );\n    }\n\n    // Check request history for a previous request with same path/params\n    // Used for caching and pagination. Ignores pagination params when comparing.\n    let paramsAsText = JSON.stringify(\n      paginateKey ? { ...params, [paginateKey]: undefined } : params\n    );\n    let priorRequest = grab?.log?.find(\n      (e) => e.request == paramsAsText && e.path == path\n    );\n\n    // Handle response data management based on pagination settings\n    if (!paginateKey) {\n      // Clear any existing response data\n      for (let key of Object.keys(response)) response[key] = undefined;\n\n      // For non-paginated requests:\n      // Return cached response if caching enabled and identical request exists\n      // after returning cache, proceed with call to revalidate ensure data is up to date\n      if (\n        cache &&\n        (!cacheForTime || priorRequest?.lastFetchTime > Date.now() - 1000 * cacheForTime)\n      ) {\n        // set response to cache data\n        for (let key of Object.keys(priorRequest.res))\n          response[key] = priorRequest.res[key];\n        if (resFunction) response = resFunction(response);\n\n        // if (!cacheValidate)  return response;\n\n      }\n\n    } else {\n      // For paginated requests:\n      // Track current page number and append results to existing data\n      let pageNumber =\n        priorRequest?.currentPage + 1 || params?.[paginateKey] || 1;\n\n      // Clear response if this is a new request with new params\n      if (!priorRequest) {\n        response[paginateResult] = [];\n        pageNumber = 1;\n      }\n\n      // Update page tracking\n      if (priorRequest) priorRequest.currentPage = pageNumber;\n      params[paginateKey] = pageNumber;\n    }\n\n    // Set loading state on response object\n    if (resFunction)\n      resFunction({ isLoading: true });\n    else if (typeof response === \"object\") response.isLoading = true;\n\n    if (resFunction) response = resFunction(response);\n\n    // Enforce rate limiting between requests if configured\n    if (\n      rateLimit > 0 &&\n      priorRequest?.lastFetchTime &&\n      priorRequest.lastFetchTime > Date.now() - 1000 * rateLimit\n    )\n      throw new Error(\n        \"Fetch rate limit exceeded for \" +\n        path +\n        \". Wait \" +\n        rateLimit +\n        \"s between requests.\"\n      );\n\n    // Handle request cancellation based on configuration:\n    // - cancelOngoingIfNew: Cancels any in-progress request for same path\n    // - cancelNewIfOngoing: Prevents new request if one is already in progress\n    if (priorRequest?.controller)\n      if (cancelOngoingIfNew) priorRequest.controller.abort();\n      else if (cancelNewIfOngoing) return { isLoading: true };\n\n    // Track new request in history log\n    grab.log.unshift({\n      path,\n      request: paramsAsText,\n      lastFetchTime: Date.now(),\n      controller: new AbortController(),\n    });\n\n    // Configure fetch request parameters including headers, cache settings,\n    // and timeout/cancellation signals\n    let fetchParams = {\n      method,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        ...headers,\n      },\n      body: params.body,\n      redirect: \"follow\" as RequestRedirect,\n      cache: cache ? \"force-cache\" : \"no-store\" as RequestCache,\n      signal: cancelOngoingIfNew\n        ? grab.log[0]?.controller?.signal\n        : AbortSignal.timeout(timeout * 1000),\n    } as RequestInit;\n\n    // Format request parameters based on HTTP method\n    // POST/PUT/PATCH send data in request body\n    // GET/DELETE append data as URL query parameters\n    let paramsGETRequest = \"\";\n    if ([\"POST\", \"PUT\", \"PATCH\"].includes(method))\n      fetchParams.body = params.body || JSON.stringify(params);\n    else paramsGETRequest = \"?\" + new URLSearchParams(params).toString();\n\n    // Execute pre-request hook if configured\n    // Allows modifying request data before sending\n    if (typeof onBeforeRequest === \"function\")\n      [path, response, params, fetchParams] = onBeforeRequest(\n        path,\n        response,\n        params,\n        fetchParams\n      );\n\n    // Handle URL construction\n    // Ensures proper joining of baseURL and path\n    if (!path.startsWith(\"/\") && !baseURL.endsWith(\"/\")) path = \"/\" + path;\n    if (path.startsWith(\"http:\") || path.startsWith(\"https:\")) baseURL = \"\";\n\n    // Process request through mock handler if configured\n    // Otherwise make actual API request\n    let res = null,\n      startTime = new Date(),\n      mockHandler = grab.mock?.[path] as GrabMockHandler;\n\n    let wait = (s) => new Promise((res) => setTimeout(res, s * 1000 || 0));\n\n    if (\n      mockHandler &&\n      (!mockHandler.params || mockHandler.method == method) &&\n      (!mockHandler.params ||\n        paramsAsText == JSON.stringify(mockHandler.params))\n    ) {\n      await wait(mockHandler.delay);\n\n      res =\n        typeof mockHandler.response === \"function\"\n          ? mockHandler.response(params)\n          : mockHandler.response;\n    } else {\n      // Make actual API request and handle response based on content type\n      res = await fetch(baseURL + path + paramsGETRequest, fetchParams).catch(\n        (e) => {\n          throw new Error(e);\n        }\n      );\n\n      if (!res.ok)\n        throw new Error(`HTTP error: ${res.status} ${res.statusText}`);\n\n      let type = res.headers.get(\"content-type\");\n      res = await (type\n        ? type.includes(\"application/json\")\n          ? res && res.json()\n          : type.includes(\"application/pdf\") ||\n            type.includes(\"application/octet-stream\")\n            ? res.blob()\n            : res.text()\n        : res.json()\n      ).catch((e) => {\n        throw new Error(\"Error parsing response: \" + e);\n      });\n    }\n\n    // Execute post-request hook if configured\n    // Allows modifying response data before processing\n    if (typeof onAfterRequest === \"function\")\n      [path, response, params, fetchParams] = onAfterRequest(\n        path,\n        response,\n        params,\n        fetchParams\n      );\n\n    // Clear request tracking states\n    if (resFunction)\n      resFunction({ isLoading: undefined });\n    else if (typeof response === \"object\") delete response?.isLoading;\n\n    delete priorRequest?.controller;\n\n    // Log debug information if enabled\n    // Includes request details, timing, and response structure\n    const elapsedTime = (\n      (Number(new Date()) - Number(startTime)) /\n      1000\n    ).toFixed(1);\n    if (debug) {\n      log(\n        \"Path:\" +\n        baseURL +\n        path +\n        paramsGETRequest +\n        \"\\n\" +\n        JSON.stringify(options, null, 2) +\n        \"\\nTime: \" +\n        elapsedTime +\n        \"s\\nResponse: \" +\n        printStructureJSON(res)\n      );\n      console.log(res);\n    }\n\n    if (typeof res === \"undefined\") return;\n\n    // Update response object with results\n    // For paginated requests, concatenates with existing results\n    if (typeof res === \"object\") {\n      for (let key of Object.keys(res))\n        response[key] =\n          paginateResult == key && response[key]?.length\n            ? [...response[key], ...res[key]]\n            : res[key];\n    } else if (resFunction) resFunction({ data: res });\n    else if (typeof response === \"object\") response.data = res;\n\n    // Store request/response in history log\n    grab.log.unshift({\n      path,\n      request: JSON.stringify({ ...params, paginateKey: undefined }),\n      response,\n      lastFetchTime: Date.now(),\n    });\n\n    if (resFunction) response = resFunction(response);\n\n    return response;\n  } catch (error) {\n\n    // Handle any errors that occurred during request processing\n    let errorMessage =\n      \"Error: \" + error.message + \"\\nPath:\" + baseURL + path + \"\\n\";\n    JSON.stringify(params);\n\n    if (typeof onError === \"function\")\n      onError(\n        error.message,\n        baseURL + path,\n        params\n      );\n\n    // Retry request if retries are configured and attempts remain\n    if (options.retryAttempts > 0)\n      return await grab(path, {\n        ...options,\n        retryAttempts: --options.retryAttempts,\n      });\n\n    // Update error state in response object\n    // Do not show errors for duplicate aborted requests\n    if (!error.message.includes(\"signal\")) {\n      log(errorMessage, true, \"color: red;\");\n      if (debug) showAlert(errorMessage);\n      response.error = error.message;\n    }\n    if (typeof response === \"function\")\n      response = response({ isLoading: undefined, error: error.message });\n    else delete response?.isLoading;\n\n    // Log error in request history\n    grab.log?.unshift({\n      path,\n      request: JSON.stringify(params),\n      error: error.message,\n    });\n\n    if (typeof options.response === \"function\")\n      response = options.response(response);\n    return response;\n  }\n}\n\n\n/**\n * Creates a new instance of grab with default options\n * to apply to all requests made by this instance\n * @param {Object} defaultOptions - options for all requests by instance\n * @returns {Function} grab() function using those options\n */\ngrab.instance =\n  (defaultOptions = {}) =>\n    (path, options = {}) =>\n      grab(path, { ...defaultOptions, ...options });\n\n\nconst debouncer = async (func, wait) => {\n  let timeout;\n  return async function executedFunction(...args) {\n    const later = async () => {\n      clearTimeout(timeout);\n      await func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n};\n\n// Add globals to window in browser, or global in Node.js\nif (typeof window !== \"undefined\") {\n  window.log = log;\n  \n  window.grab = grab.instance();\n  window.grab.log = [];\n  window.grab.mock = {};\n  window.grab.defaults = {};\n\n  //Ctrl+I setup dev tools\n  setupDevTools();\n\n  // Restore scroll position when page loads or component mounts\n  document.addEventListener(\"DOMContentLoaded\", () => {\n    let [scrollTop, scrollLeft, paginateElement] =\n      JSON.parse(localStorage.getItem(\"scroll\")) || [];\n    if (!scrollTop) return;\n    document.querySelector(paginateElement).scrollTop = scrollTop;\n    document.querySelector(paginateElement).scrollLeft = scrollLeft;\n  });\n} else if (typeof global !== \"undefined\") {\n  grab.log = [];\n  grab.mock = {};\n  grab.defaults = {};\n  global.log = log;\n  global.grab = grab.instance();\n} else if (typeof globalThis !== \"undefined\") {\n  grab.log = [];\n  grab.mock = {};\n  grab.defaults = {};\n  globalThis.log = log;\n  globalThis.grab = grab.instance();\n}\n\n/***************** TYPESCRIPT INTERFACES *****************/\n\n// Core response object that gets populated with API response data\nexport interface GrabResponse<T = any> {\n  /** Indicates if request is currently in progress */\n  isLoading?: boolean;\n  /** Error message if request failed */\n  error?: string;\n  /** Binary or text response data (JSON is set to the root)*/\n  data?: T;\n  /** The actual response data - type depends on API endpoint */\n  [key: string]: T | boolean | string | undefined;\n}\n\n\nexport interface GrabOptions<TResponse = any, TParams = Record<string, any>> {\n  /** include headers and authorization in the request */\n  headers?: Record<string, string>;\n  /** Pre-initialized object which becomes response JSON, no need for .data */\n  response?: Record<string, any>;\n  /** default=\"GET\" The HTTP method to use */\n  method?: \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\" | \"OPTIONS\" | \"HEAD\";\n  /** default=false Whether to cache the request and from frontend cache */\n  cache?: boolean;\n  /** default=60 Seconds to consider data stale and invalidate cache */\n  cacheForTime?: number;\n  /** default=30 The timeout for the request in seconds */\n  timeout?: number;\n  /** default='/api/' base url prefix, override with SERVER_API_URL env */\n  baseURL?: string;\n  /** default=true Cancel previous requests to same path */\n  cancelOngoingIfNew?: boolean;\n  /** default=false Cancel if a request to path is in progress */\n  cancelNewIfOngoing?: boolean;\n  /** default=false If set, how many seconds to wait between requests */\n  rateLimit?: number;\n  /** default=false Whether to log the request and response */\n  debug?: boolean;\n  /** default=null [page key, response field to concatenate, element with results] */\n  infiniteScroll?: [string, string, string];\n  /** default=false Pass this with options to set those options as defaults for all requests */\n  setDefaults?: boolean;\n  /** default=0 Retry failed requests this many times */\n  retryAttempts?: number;\n  /** default=log Custom logger to override the built-in color JSON log() */\n  logger?: (...args: any[]) => void;\n  /** Set with defaults to modify each request data. Takes and returns in order: path, response, params, fetchParams */\n  onBeforeRequest?: (...args: any[]) => any;\n  /** Set with defaults to modify each request data. Takes and returns in order: path, response, params, fetchParams */\n  onAfterRequest?: (...args: any[]) => any;\n  /** Set with defaults to modify each request data. Takes and returns in order: error, path, params */\n  onError?: (...args: any[]) => any;\n  /** default=0 Repeat request this many times */\n  repeat?: number;\n  /** default=null Repeat request every seconds */\n  repeatEvery?: number;\n  /** default=0 Seconds to debounce request, wait to execute so that other requests may override */\n  debounce?: number;\n  /** default=false Refetch when cache is past cacheForTime */\n  regrabOnStale?: boolean;\n  /** default=false Refetch on window refocus */\n  regrabOnFocus?: boolean;\n  /** default=false Refetch on network change */\n  regrabOnNetwork?: boolean;\n  /** shortcut for method: \"POST\" */\n  post?: boolean;\n  /** shortcut for method: \"PUT\" */\n  put?: boolean;\n  /** shortcut for method: \"PATCH\" */\n  patch?: boolean;\n  /** default=null The body of the POST/PUT/PATCH request (can be passed into main)*/\n  body?: any;\n  /** All other params become GET params, POST body, and other methods */\n  [key: string]: any;\n}\n\n\n// Combined options and parameters interface\nexport interface GrabRequestConfig<\n  TResponse = any,\n  TParams = Record<string, any>\n> extends GrabOptions<TResponse, TParams> { }\n\n// Mock server configuration for testing\nexport interface GrabMockHandler<TParams = any, TResponse = any> {\n  /** Mock response data or function that returns response */\n  response: TResponse | ((params: TParams) => TResponse);\n  /** HTTP method this mock should respond to */\n  method?: \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\" | \"OPTIONS\" | \"HEAD\";\n  /** Request parameters this mock should match */\n  params?: TParams;\n  /** Delay in seconds before returning mock response */\n  delay?: number;\n}\n\n// Request log entry for debugging and history\nexport interface GrabLogEntry {\n  /** API path that was requested */\n  path: string;\n  /** Stringified request parameters */\n  request: string;\n  /** Response data (only present for successful requests) */\n  response?: any;\n  /** Error message (only present for failed requests) */\n  error?: string;\n  /** Timestamp when request was made */\n  lastFetchTime: number;\n  /** Abort controller for request cancellation */\n  controller?: AbortController;\n  /** Current page number for paginated requests */\n  currentPage?: number;\n}\n\n// Global grab configuration and state\nexport interface GrabGlobal {\n  /** Default options applied to all requests */\n  defaults?: Partial<GrabOptions>;\n  /** Request history and debugging info */\n  log?: GrabLogEntry[];\n  /** Mock server handlers for testing */\n  mock?: Record<string, GrabMockHandler>;\n  /** Create a separate instance of grab with separate default options */\n  instance?: (defaultOptions?: Partial<GrabOptions>) => GrabFunction;\n}\n\n// Main grab function signature with overloads for different use cases\nexport interface GrabFunction {\n  /**\n * ### GRAB: Generate Request to API from Browser\n * ![grabAPILogo](https://i.imgur.com/qrQWkeb.png)\n * Make API request with path \n * @returns {Promise<Object>} The response object with resulting data or .error if error.\n * @author [vtempest (2025)](https://github.com/vtempest/grab-api)\n * @see  [🎯 Examples](https://grab.js.org/guide/Examples) [📑 Docs](https://grab.js.org/lib)\n */\n  <TResponse = any>(path: string): Promise<GrabResponse<TResponse>>;\n\n  /**\n   * ### GRAB: Generate Request to API from Browser\n   * ![grabAPILogo](https://i.imgur.com/qrQWkeb.png)\n   * Make API request with path and options/parameters\n   * @returns {Promise<Object>} The response object with resulting data or .error if error.\n   * @author [vtempest (2025)](https://github.com/vtempest/grab-api)\n   * @see  [🎯 Examples](https://grab.js.org/guide/Examples) [📑 Docs](https://grab.js.org/lib)\n   */\n  <TResponse = any, TParams = Record<string, any>>(\n    path: string,\n    config: GrabRequestConfig<TResponse, TParams>\n  ): Promise<GrabResponse<TResponse>>;\n\n  /** Default options applied to all requests */\n  defaults?: Partial<GrabOptions>;\n\n  /** Request history and debugging info for all requests */\n  log?: GrabLogEntry[];\n\n  /** Mock server handlers for testing */\n  mock?: Record<string, GrabMockHandler>;\n\n  /** Create a separate instance of grab with separate default options */\n  instance?: (defaultOptions?: Partial<GrabOptions>) => GrabFunction;\n}\n\n// Log function for debugging\nexport interface LogFunction {\n  /**\n   * Log messages with custom styling\n   * @param message - Message to log (string or object)\n   * @param hideInProduction - Whether to hide in production (auto-detected if undefined)\n   * @param style - CSS style string for console output\n   */\n  (message: string | object, hideInProduction?: boolean, style?: string): void;\n}\n\n// Utility function to describe JSON structure\nexport interface PrintStructureJSONFunction {\n  /**\n   * Generate TypeDoc-like description of JSON object structure\n   * @param obj - The JSON object to describe\n   * @returns String representation of object structure\n   */\n  (obj: any): string;\n}\n\n\n// Type helpers for common use cases\nexport type GrabResponseWithData<T> = GrabResponse<T> & {\n  data?: T;\n};\n\n\n// Helper type for creating typed API clients\nexport type TypedGrabFunction = <\n  TResponse = any,\n  TParams = Record<string, any>\n>(\n  path: string,\n  config?: GrabRequestConfig<TResponse, TParams>\n) => Promise<GrabResponse<TResponse>>;\n\n\n\ndeclare global {\n  // Browser globals\n  interface Window {\n    grab: GrabFunction;\n    log: LogFunction;\n  }\n\n  // Node.js globals\n  namespace NodeJS {\n    interface Global {\n      grab: GrabFunction;\n      log: LogFunction;\n    }\n  }\n\n  // Global variables available after script inclusion\n  var log: LogFunction;\n  var grab: GrabFunction;\n}\n\nexport {\n  grab, log, showAlert, printStructureJSON\n}"],"names":["log","message","hideInProduction","style","window","location","hostname","includes","printStructureJSON","JSON","stringify","console","debug","colors","reset","yellow","cyan","magenta","gray","green","blue","red","white","getColorForType","value","Array","isArray","getTypeString","length","obj","indent","pad","repeat","result","result2","forEach","item","idx","keys","Object","key","index","color","showAlert","msg","list","o","document","getElementById","body","appendChild","createElement","id","setAttribute","innerHTML","addEventListener","e","target","remove","onclick","querySelector","async","grab","path","options","headers","response","method","post","put","patch","cache","cacheForTime","timeout","baseURL","process","env","SERVER_API_URL","cancelOngoingIfNew","cancelNewIfOngoing","rateLimit","infiniteScroll","setDefaults","retryAttempts","logger","onBeforeRequest","onAfterRequest","onError","repeatEvery","debounce","regrabOnStale","regrabOnFocus","regrabOnNetwork","params","_a","defaults","_b","global","debouncer","i","setInterval","globalThis","setTimeout","visibilityState","resFunction","paginateKey","paginateResult","paginateElement","paginateDOM","removeEventListener","_c","scrollListener","t","localStorage","setItem","scrollTop","scrollLeft","scrollHeight","clientHeight","priorRequest","currentPage","paramsAsText","grab$1","_d","find","request","pageNumber","lastFetchTime","Date","now","res","isLoading","Error","controller","abort","unshift","AbortController","fetchParams","Accept","redirect","signal","_e","_f","AbortSignal","paramsGETRequest","URLSearchParams","toString","startsWith","endsWith","startTime","mockHandler","mock","_g","wait","s","Promise","fetch","catch","ok","status","statusText","type","get","json","blob","text","delay","elapsedTime","Number","toFixed","_h","data","error","errorMessage","_i","instance","defaultOptions","func","args","clearTimeout","ctrlKey","html","toLocaleString","parse","getItem"],"mappings":"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"}