{"version":3,"file":"grab-api.cjs.js","sources":["../src/log.js","../src/grab-api.js"],"sourcesContent":["\n/**\n * Logs messages to the console with custom styling,\n * showing debug output in development and standard logs in production.\n * Pretty print JSON with description of structure layout.\n * @param {string|object} message - The message to log. If an object is provided, it will be stringified.\n * @param {boolean} [hideInProduction] -  default = auto-detects based on hostname.\n *  If true, uses `console.debug` (hidden in production). If false, uses `console.log`.\n * @param {string} [style] default='color: blue; font-size: 15px' - CSS style string for the console output.\n */\nexport function log(\n  message,\n  hideInProduction = undefined,\n  style = \"color: blue; font-size: 14px;\"\n) {\n  if (typeof hideInProduction === \"undefined\")\n    hideInProduction = window?.location.hostname.includes(\"localhost\");\n  // pretty print JSON with description of structure layout\n  if (typeof message === \"object\")\n    message =\n      printStructureJSON(message) + \"\\n\\n\" + JSON.stringify(message, null, 2);\n\n  if (hideInProduction) console.debug((style ? \"%c\" : \"\") + message, style);\n  else console.log((style ? \"%c\" : \"\") + message, style);\n}\n\n\n\n\n\n// ANSI color codes (for Node.js)\nconst colors = {\n  reset: \"\\x1b[0m\",\n  yellow: \"\\x1b[33m\",    // string\n  cyan: \"\\x1b[36m\",      // number\n  magenta: \"\\x1b[35m\",   // boolean\n  gray: \"\\x1b[90m\",      // null\n  green: \"\\x1b[32m\",     // object braces\n  blue: \"\\x1b[34m\",      // array brackets\n  red: \"\\x1b[31m\",       // function\n  white: \"\\x1b[37m\",     // default\n};\n\nfunction getColorForType(value) {\n  if (typeof value === \"string\") return colors.yellow;\n  if (typeof value === \"number\") return colors.cyan;\n  if (typeof value === \"boolean\") return colors.magenta;\n  if (typeof value === \"function\") return colors.red;\n  if (value === null) return colors.gray;\n  if (Array.isArray(value)) return colors.blue;\n  if (typeof value === \"object\") return colors.green;\n  return colors.white;\n}\n\nfunction getTypeString(value) {\n  if (typeof value === \"string\") return '\"\"';\n  if (typeof value === \"number\") return \"number\";\n  if (typeof value === \"boolean\") return \"bool\";\n  if (typeof value === \"function\") return \"function\";\n  if (value === null) return \"null\";\n  if (Array.isArray(value)) {\n    if (value.length)\n      return \"[\" + getTypeString(value[0]) + \"]\";\n    else\n      return \"[]\";\n  }\n  if (typeof value === \"object\") return \"{...}\";\n  return typeof value;\n}\n\nexport function printStructureJSON(obj, indent = 0) {\n  const pad = \"  \".repeat(indent);\n\n  // Handle primitives and null\n  if (typeof obj !== \"object\" || obj === null) {\n    const color = getColorForType(obj);\n    return color + getTypeString(obj) + colors.reset;\n  }\n\n  // Handle arrays\n  if (Array.isArray(obj)) {\n    let result = colors.blue + \"[\" + colors.reset;\n    if (obj.length) result += \"\\n\";\n    obj.forEach((item, idx) => {\n      result += pad + \"  \" + printStructureJSON(item, indent + 1);\n      if (idx < obj.length - 1) result += \",\";\n      result += \"\\n\";\n    });\n    result += pad + colors.blue + \"]\" + colors.reset;\n    return result;\n  }\n\n  // Handle objects\n  let result = colors.green + \"{\" + colors.reset;\n  const keys = Object.keys(obj);\n  if (keys.length) result += \"\\n\";\n  keys.forEach((key, index) => {\n    const value = obj[key];\n    const color = getColorForType(value);\n    result += pad + \"  \";\n    if (typeof value === \"object\" && value !== null && !Array.isArray(value)) {\n      // For nested objects, colorize key, then recurse for value\n      result += color + key + colors.reset + \": \" + printStructureJSON(value, indent + 1);\n    } else if (Array.isArray(value)) {\n      // For arrays, colorize key, then recurse for value\n      result += color + key + colors.reset + \": \" + printStructureJSON(value, indent + 1);\n    } else {\n      // For primitives\n      result += color + key + \": \" + getTypeString(value) + colors.reset;\n    }\n    if (index < keys.length - 1) result += \",\";\n    result += \"\\n\";\n  });\n  result += pad + colors.green + \"}\" + colors.reset;\n  if (indent === 0) {\n    console.log(result);\n  }\n  return result;\n}\n\n// Example usage:\nconst test = {\n  name: \"Alice\",\n  age: 30,\n  active: () => true,\n  tags: [\"user\", 4, \"admin\"],\n  profile: {\n    email: \"alice@example.com\",\n    verified: false,\n    meta: { created: \"2024-01-01\", score: 99 }\n  }\n};\n\nprintStructureJSON(test);\n","import { printStructureJSON, log } from './log.js';\n\n/**\n * ### GRAB: Generate Request to API from Browser\n * ![grabAPILogo](https://i.imgur.com/qrQWkeb.png)\n * \n * 1. **One Function**: 2Kb min.js less boilerplate complexity than axios, SuperAgent, Tanstack, Alova, SWR, TanStack, apisauce\n * 2. **Auto-JSON Convert**: Pass parameters and get response or error in JSON, handling other data types as is.\n * 3. **Reactive isLoading State**: Sets `.isLoading=true` on the pre-initialized response object so you can show a \"Loading...\" in any component framework.\n * 4. **Mock Server Support**: Configure `window.grab.mock` for development and testing environments\n * 5. **Concurrency Handling**: Prevent this request if one is ongoing to same path & params, or cancel the ongoing request.\n * 6. **Rate Limiting**: Built-in rate limiting to prevent multi-click cascading responses, require to wait seconds between requests.\n * 7. **Timeout & Retry**: Customizable request timeout, default 20s, and auto-retry on error\n * 8. **Debug Logging**: Adds global `log()` and prints colored JSON structure, response, timing for requests in test.\n * 9. **Request History**: Stores all request and response data in global `grab.log` object\n * 10. **Pagination Infinite Scroll**: Built-in pagination for infinite scroll to auto-load and merge next result page.\n * 11. **Base URL Based on Environment**: Configure `grab.default.baseURL` once at the top, overide with `SERVER_API_URL` in `.env`.\n * 12. **Frontend Cache**: Set cache headers and retrieve from frontend memory for repeat requests to static data.\n * 13. **Modular Design**: Single, flexible function that can be called from any part of your application.\n * 14. **Framework Agnostic**: Alternatives like TanStack work only in component initialization and depend on React & others. \n * 15. **Globals**: Adds to window in browser or global in Node.js so you only import once: `grab()`, `log()`, `grab.log`, `grab.mock`, `grab.default`\n * 16. **TypeScript Tooltips**: Developers can hover over option names and autocomplete TypeScript. Add to top of file: `import 'grab-api.js/globals'`\n * \n * @param {string} path The path in the API after base url\n * @param {object} [options={}] Request params for GET or body for POST and utility options\n * @param {string} [options.method] default=\"GET\" The HTTP method to use\n * @param {object} [options.response] Pre-initialized object to set the response in. isLoading and error are also set on this object.\n * @param {boolean} [options.cancelOngoingIfNew]  default=true Cancel previous requests to same path\n * @param {boolean} [options.cancelNewIfOngoing] default=false Cancel if a request to path is in progress\n * @param {boolean}[options.cache] default=false Whether to cache the request and from frontend cache\n * @param {boolean} [options.debug] default=false Whether to log the request and response\n * @param {number} [options.timeout] default=20 The timeout for the request in seconds\n * @param {number} [options.rateLimit] default=0 If set, how many seconds to wait between requests\n * @param {string} [options.paginateResult]  The key to paginate result data by\n * @param {string} [options.paginateKey] default=\"\" The key to paginate the request by\n * @param {string} [options.baseURL] default='/api/' base url prefix, override with SERVER_API_URL env\n * @param {boolean} [options.setDefaults] default=false Pass this with options to set\n *  those options as defaults for all requests.\n * @param {number} [options.retryAttempts] default=0 Retry failed requests this many times\n * @param {function} [options.logger] default=log Custom logger to override the built-in color JSON log()\n * @param {function} [options.onBeforeRequest] Set with defaults to modify each request data. Takes and returns in order: path, response, params, fetchParams\n * @param {function} [options.onAfterRequest] Set with defaults to modify each request data. Takes and returns in order: path, response, params, fetchParams\n * @param {any} [...params] All other params become GET params, POST body, and other methods.\n * @returns {Promise<Object>} The response object with resulting data or .error if error.\n * @author [vtempest (2025)](https://github.com/vtempest/grab-api)\n * @see [Examples](https://grab.js.org/guide/Examples) [Docs](https://grab.js.org/lib)\n * @example import { grab } from \"grab-api.js\";\n  let res = $state({}) \n  await grab('search', {\n    response: res,\n    query: \"search words\"\n  })\n */\nexport async function grab(path, options = {}) {\n  let {\n    headers,\n    response = {}, // Pre-initialized object to set the response in. isLoading and error are also set on this object.\n    method = \"GET\",\n    cache = false, // Enable/disable frontend caching\n    timeout = 20, // Request timeout in seconds\n    baseURL = (typeof process !== \"undefined\" &&\n      process?.env?.SERVER_API_URL) ||\n      \"/api/\", // Use env var or default to /api/\n    cancelOngoingIfNew = true, // Cancel previous request for same path\n    cancelNewIfOngoing = false, // Don't make new request if one is ongoing\n    rateLimit = 0, // Minimum seconds between requests\n    debug = window?.location?.hostname?.includes(\"localhost\"), // Auto-enable debug on localhost\n    paginateResult = null, // Key to paginate in response\n    paginateKey = null, // Request param for pagination\n    setDefaults = false, // Set these options as defaults for future requests\n    retryAttempts = 0, // Retry failed requests once\n    logger = log, // Custom logger to override the built-in color JSON log()\n    onBeforeRequest = null, // Hook to modify request data before request is made\n    ...params // All other params become request params/query\n  } = {\n    // Destructure options with defaults, merging with any globally set defaults\n    ...(window?.grab?.defaults || global?.grab?.defaults || {}),\n    ...options,\n  };\n\n  try {\n    // Store options as defaults if setDefaults flag is true\n    if (options?.setDefaults) {\n      if (typeof window !== \"undefined\") window.grab.default = { ...options, setDefaults: undefined };\n      else global.grab.default = { ...options, setDefaults: undefined };\n      return {};\n    }\n\n    // Initialize response object if not provided\n    if (!response) response = {};\n\n    // Find prior request in log same path and params, ignoring the \"page\" or similar page key\n    let paramsAsText = JSON.stringify(\n      paginateKey ? { ...params, [paginateKey]: undefined } : params\n    );\n    let priorRequest = grab.log?.find(\n      (e) => e.request == paramsAsText && e.path == path\n    );\n\n    // Handle response clearing/caching based on pagination\n    if (!paginateKey) {\n      // Return cached response if enabled and request is identical\n      if (cache && priorRequest) {\n        for (let key of Object.keys(priorRequest.res))\n          response[key] = priorRequest.res[key];\n        return response;\n      }\n\n      // Clear previous response data\n      for (let key of Object.keys(response)) response[key] = undefined;\n    } else {\n      // Handle pagination - track current page and append results\n      let pageNumber =\n        priorRequest?.currentPage + 1 || params?.[paginateKey] || 1;\n\n      //clear response if not repeat request, new params\n      if (!priorRequest) {\n        response[paginateResult] = [];\n        pageNumber = 1;\n      }\n\n      //update current page on prior request\n      if (priorRequest) priorRequest.currentPage = pageNumber;\n      params[paginateKey] = pageNumber;\n    }\n\n    // Set loading state\n    response.isLoading = true;\n\n    // Enforce rate limiting if enabled\n    if (\n      rateLimit > 0 &&\n      priorRequest?.lastFetchTime &&\n      priorRequest.lastFetchTime > Date.now() - 1000 * rateLimit\n    )\n      throw new Error(\n        \"Fetch rate limit exceeded for \" +\n          path +\n          \". Wait \" +\n          rateLimit +\n          \"s between requests.\"\n      );\n\n    // Handle request cancellation logic\n    if (priorRequest?.controller)\n      if (cancelOngoingIfNew) priorRequest.controller.abort();\n      else if (cancelNewIfOngoing) return { isLoading: true };\n\n    // Setup new request tracking\n    grab.log.unshift({\n      path,\n      request: paramsAsText,\n      lastFetchTime: Date.now(),\n      controller: new AbortController(),\n    });\n\n    // Configure fetch parameters\n    let fetchParams = {\n      method,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        ...headers,\n      },\n      redirect: \"follow\",\n      cache: cache ? \"force-cache\" : \"no-store\",\n      signal: cancelOngoingIfNew\n        ? grab.log[0]?.controller?.signal\n        : AbortSignal.timeout(timeout * 1000),\n    };\n\n    // Format request params/query params based on method\n    let paramsGETRequest = \"\";\n    if ([\"POST\", \"PUT\", \"PATCH\"].includes(method))\n      fetchParams.body = JSON.stringify(params);\n    else paramsGETRequest = \"?\" + new URLSearchParams(params).toString();\n\n    //hook all requests before request intercept to modify data\n    if (typeof beforeRequest === \"function\")\n      [path, response, params, fetchParams] = onBeforeRequest(\n        path,\n        response,\n        params,\n        fetchParams\n      );\n\n    // Handle path and baseURL, if path is absolute, ignore baseURL\n    if (!path.startsWith(\"/\") && !baseURL.endsWith(\"/\")) path = \"/\" + path;\n    if (path.startsWith(\"http:\") || path.startsWith(\"https:\")) baseURL = \"\";\n\n    // Handle mock server responses if configured\n    let res = null,\n      startTime = new Date(),\n      mockHandler = grab.mock?.[path];\n\n    if (\n      mockHandler &&\n      (!mockHandler.params || mockHandler.method == method) &&\n      (!mockHandler.params ||\n        paramsAsText == JSON.stringify(mockHandler.params))\n    ) {\n      await new Promise((resolve) =>\n        setTimeout(resolve, mockHandler.delay * 1000 || 0)\n      );\n\n      res =\n        typeof mockHandler.response === \"function\"\n          ? mockHandler.response(params)\n          : mockHandler.response;\n    } else {\n      // Make actual API request\n      res = await fetch(baseURL + path + paramsGETRequest, fetchParams).catch(\n        (e) => {\n          throw new Error(e);\n        }\n      );\n\n      //get response type\n      let type = res.headers.get(\"content-type\");\n      res = await (type\n        ? type.includes(\"application/json\")\n          ? res.json()\n          : type.includes(\"application/pdf\") ||\n            type.includes(\"application/octet-stream\")\n          ? res.blob()\n          : res.text()\n        : res.json()\n      ).catch((e) => {\n        throw new Error(\"Error parsing response: \" + e);\n      });\n\n      if (res?.startsWith && res?.startsWith(\"{\")) res = JSON.parse(res);\n    }\n\n    //hook all requests before request intercept to modify data\n    if (typeof afterRequest === \"function\")\n      [path, response, params, fetchParams] = onAfterRequest(\n        path,\n        response,\n        params,\n        fetchParams\n      );\n\n\n    // Clear loading state\n    delete response.isLoading;\n\n    delete priorRequest?.controller;\n\n    // Log debug information if enabled\n\n    const elapsedTime = (\n      (Number(new Date()) - Number(startTime)) /\n      1000\n    ).toFixed(1);\n    if (debug) {\n      log(\n        \"Path:\" +\n          baseURL +\n          path +\n          paramsGETRequest +\n          \"\\n\" +\n          JSON.stringify(options, null, 2) +\n          \"\\nTime: \" +\n          elapsedTime +\n          \"s\\nResponse: \" +\n          printStructureJSON(res)\n      );\n      // allows user to expand and collapse the object in console\n      console.log(res);\n    }\n\n    //if not object, return\n    if (typeof res === \"undefined\") return;\n\n    // Update response object with results, handling pagination\n    for (let key of Object.keys(res))\n      response[key] =\n        paginateResult == key && response[key]?.length\n          ? [...response[key], ...res[key]] // concat with existing results\n          : res[key]; // set new results\n\n    // Store request/response data for future reference\n    grab.log.unshift({\n      path,\n      request: JSON.stringify({ ...params, paginateKey: undefined }),\n      response,\n      lastFetchTime: Date.now(),\n    });\n\n    return response;\n  } catch (error) {\n    log(\n      \"Error: \" +\n        error.message +\n        \"\\nPath:\" +\n        baseURL +\n        path +\n        JSON.stringify(params),\n      true,\n      \"color: red;\"\n    );\n\n    // Handle errors, with optional retry\n    if (options.retryAttempts > 0)\n      return await grab(path, response, { ...options, retryAttempts: --options.retryAttempts });\n    // update error in response\n    if (!error.message.includes(\"signal\")) response.error = error.message;\n    delete response.isLoading;\n    // update error in log\n    grab.log?.unshift({\n      path,\n      request: JSON.stringify(params),\n      error: error.message,\n    });\n    return response;\n  }\n}\n\n  // Add globals to window in browser, or global in Node.js\n  if (typeof window !== \"undefined\") {\n    window.grab = grab;\n    window.log = log;\n    window.grab.log = [];\n    window.grab.mock = {};\n    window.grab.default = {};\n  } else if (typeof global !== \"undefined\") {\n    global.grab = grab;\n    global.log = log;\n    global.grab.log = [];\n    global.grab.mock = {};\n    global.grab.default = {};\n  }\n  \n  \n\nexport default grab;\n  \n  /**\n   * Todo:\n   *  - pagination working\n   *  - progress\n   *  - create new Grab()\n   *  - grab error popup and dev tool\n   *  - tests\n   *  - loading icons\n   */"],"names":["log","message","hideInProduction","style","window","location","hostname","includes","printStructureJSON","JSON","stringify","console","debug","colors","reset","yellow","cyan","magenta","gray","green","blue","red","white","getColorForType","value","Array","isArray","getTypeString","length","obj","indent","pad","repeat","result","forEach","item","idx","keys","Object","key","index","color","async","grab","path","options","headers","response","method","cache","timeout","baseURL","process","_a","env","SERVER_API_URL","cancelOngoingIfNew","cancelNewIfOngoing","rateLimit","_c","_b","paginateResult","paginateKey","setDefaults","retryAttempts","logger","onBeforeRequest","params","_d","defaults","_e","global","default","paramsAsText","priorRequest","_f","find","e","request","pageNumber","currentPage","res","isLoading","lastFetchTime","Date","now","Error","controller","abort","unshift","AbortController","fetchParams","Accept","redirect","signal","_h","_g","AbortSignal","paramsGETRequest","body","URLSearchParams","toString","beforeRequest","startsWith","endsWith","startTime","mockHandler","_i","mock","fetch","catch","type","get","json","blob","text","parse","Promise","resolve","setTimeout","delay","afterRequest","onAfterRequest","elapsedTime","Number","toFixed","_j","error","_k","name","age","active","tags","profile","email","verified","meta","created","score"],"mappings":"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"}