{"version":3,"file":"grab-api.umd.js","sources":["../src/grab-api.js"],"sourcesContent":["/**\n * ### GRAB: Generate Request to API from Browser\n * ![grabAPILogo](https://i.imgur.com/qrQWkeb.png)\n * \n * 1. **Data Retrieval**: Fetches data from server APIs using JSON parameters and returns JSON responses or error objects\n * 2. **Minimalist One Function**: 2Kb min.js less boilerplate complexity than axios, SuperAgent, Tanstack, Alova, SWR, TanStack, apisauce, bent\n * 3. **Automatic Loading States**: Sets `isLoading` to `true` during data fetching operations and `false` upon completion\n * 4. **Mock Server Support**: Configure `window.grab.server` for development and testing environments\n * 5. **Concurrent Request Handling**: Cancels duplicate or overlapping requests automatically\n * 6. **Timeout Configuration**: Customizable request timeout settings\n * 7. **Rate Limiting**: Built-in rate limiting to prevent API abuse\n * 8. **Debug Logging**: Comprehensive logging system for request monitoring\n * 9. **Request History**: Stores all request and response data in global `grab.log` object\n * 10. **Pagination Support**: Built-in pagination handling for large datasets\n * 11. **Environment Configuration**: Configurable base URLs for development and production environments\n * 12. **Frontend Caching**: Intelligent caching system that prevents redundant API calls for repeat requests\n * 13. **Modular Design**: Single, flexible function that can be called from any part of your application.\n * 14. **Framework Agnostic**: No dependency on React hooks or component lifecycle - works with any JavaScript framework\n * 15. **Universal Usage**:  More flexible than TanStack Query - works outside component initialization, \n * \n * @param {string} path The path in the API after base url\n * @param {object} response Pre-initialized object to store the response in,\n *  isLoading and error are also set on this object.\n * @param {object} [options={}] Request params for GET or POST and more options\n * @param {string} [options.method] default=\"GET\" The HTTP method to use\n * @param {boolean} [options.cancelOngoingIfNew]  default=true Cancel previous requests to same path\n * @param {boolean} [options.cancelNewIfOngoing] default=false Cancel if a request to path is in progress\n * @param {boolean}[options.cache] default=false Whether to cache the request and from frontend cache\n * @param {boolean} [options.debug] default=false Whether to log the request and response\n * @param {number} [options.timeout] default=20 The timeout for the request in seconds\n * @param {number} [options.rateLimit] default=0 If set, how many seconds to wait between requests\n * @param {string} [options.paginateResult] default=null The key to paginate result data by\n * @param {string} [options.paginateKey] default=\"\" The key to paginate the request by\n * @param {string} [options.baseURL] default='/api/' base url prefix, override with SERVER_API_URL env\n * @param {boolean} [options.setDefaults] default=false Pass this with options to set\n *  those options as defaults for all requests.\n * @param {any} *\n * @returns {Promise<Object>} The response from the server API\n * @author [vtempest (2025)](https://github.com/vtempest/grab-api)\n * @example \n  import { grab } from \"grab-api.js\";\n  let res = $state({}) as {\n      results: Array<{title:string}>,\n      isLoading: boolean,\n      error: string,\n  };\n   \n  await grab('search', res, {\n    query: \"search words\",\n    method: 'POST'\n  })\n  //in svelte component\n  {#if res.results}\n      {res.results}\n  {:else if res.isLoading}\n      ...\n  {:else if res.error}\n      {res.error}\n  {/if}\n\n  //Setup Mock testing server, response is object or function\n  window.grab.server[\"search\"] = {\n    response: (params) => {\n      return { results: [{title:`Result about ${params.query}`}] };\n    },\n    method: \"POST\",\n    params: {\n      query: \"search words\"\n    },\n    delay : 1,\n  };\n\n  //set defaults for all requests\n  grab(\"\", {}, { \n    setDefaults: true,\n    baseURL: \"http://localhost:8080\",\n    timeout: 30,\n    debug: true,\n    rateLimit: 1,\n    cache: true,\n    cancelOngoingIfNew: true,\n    cancelNewIfOngoing: true,\n  });\n */\nexport async function grab(path, response = {}, options = {}) {\n    let {\n      headers,\n      method = \"GET\",\n      cache = false, // Enable/disable frontend caching\n      timeout = 20, // Request timeout in seconds\n      baseURL = (typeof process !== \"undefined\" && process?.env?.SERVER_API_URL) || \"/api/\", // Use env var or default to /api/\n      cancelOngoingIfNew = true, // Cancel previous request for same path\n      cancelNewIfOngoing = false, // Don't make new request if one is ongoing\n      rateLimit = 0, // Minimum seconds between requests\n      debug = window?.location?.hostname?.includes(\"localhost\"), // Auto-enable debug on localhost\n      paginateResult = null, // Key to paginate in response\n      paginateKey = null, // Request param for pagination\n      setDefaults = false, // Set these options as defaults for future requests\n      retryOnError = false, // Retry failed requests once\n      ...params // All other params become request params/query\n    } = {\n      // Destructure options with defaults, merging with any globally set defaults\n      ...(window?.grab?.defaults || global?.grab?.defaults || {}),\n      ...options,\n    };\n\n  try {\n  \n    // Store options as defaults if setDefaults flag is true\n    if (options?.setDefaults) {\n      window.grab.defaults = { ...options, setDefaults: undefined };\n      return {};\n    }\n\n    // Initialize response object if not provided\n    if (!response) response = {};\n\n    let paramsAsText = JSON.stringify({...params, paginateKey: undefined});\n\n    // Initialize tracking for this request path\n    let priorRequest = grab.log?.find(\n      e => e.request == paramsAsText && e.path == path\n    );\n    \n    // Check if this is a repeat request by comparing params\n    // if (priorRequest?.request)\n    //   priorRequest.request[paginateKey] = undefined;\n    const isRepeatRequest = priorRequest?.request == paramsAsText;\n\n    // Handle response clearing/caching based on pagination\n    if (!paginateKey) {\n      // Return cached response if enabled and request is identical\n      if (cache && isRepeatRequest) {\n        for (let key of Object.keys(priorRequest.res))\n          response[key] = priorRequest.res[key];\n        return response;\n      }\n\n      // Clear previous response data\n      for (let key of Object.keys(response)) response[key] = undefined;\n    } else {\n      // Handle pagination - track current page and append results\n      let pageNumber = priorRequest?.currentPage + 1|| params?.[paginateKey] || 1;\n\n      //clear response if not repeat request, new params\n      if (!isRepeatRequest) {\n        response[paginateResult] = [];\n        pageNumber = 1;\n      }\n\n      //update current page on prior request\n      if (priorRequest) \n        priorRequest.currentPage = pageNumber;\n      params[paginateKey] = pageNumber;\n    }\n\n    // Set loading state\n    response.isLoading = true;\n\n    // Enforce rate limiting if enabled\n    if (\n      rateLimit > 0 &&\n      priorRequest?.lastFetchTime &&\n      priorRequest.lastFetchTime > Date.now() - 1000 * rateLimit\n    )\n      throw new Error(\"Fetch rate limit exceeded\");\n\n    // Handle request cancellation logic\n    if (priorRequest?.controller && isRepeatRequest)\n      if (cancelOngoingIfNew) priorRequest.controller.abort();\n      else if (cancelNewIfOngoing) return { isLoading: true };\n\n    // Setup new request tracking\n    grab.log.unshift({\n      path,\n      request: paramsAsText,\n      lastFetchTime: Date.now(),\n      controller: new AbortController(),\n    });\n\n    // Configure fetch parameters\n    const fetchParams = {\n      method,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        ...headers,\n      },\n      body: null,\n      redirect: \"follow\",\n      cache: cache ? \"force-cache\" : \"no-store\",\n      signal: cancelOngoingIfNew\n        ? grab.log[0]?.controller?.signal\n        : AbortSignal.timeout(timeout * 1000),\n    };\n\n    // Format request params/query params based on method\n    let paramsGETRequest = \"\";\n    if ([\"POST\", \"PUT\", \"PATCH\"].includes(method))\n      fetchParams.body = JSON.stringify(params);\n    else paramsGETRequest = \"?\" + new URLSearchParams(params).toString();\n\n    // Handle mock server responses if configured\n    let res = null,\n      startTime = new Date(),\n      mockHandler = grab.server?.[path];\n\n    if (\n      mockHandler &&\n      (!mockHandler.params || mockHandler.method == method) &&\n      (!mockHandler.params ||\n        paramsAsText == JSON.stringify(mockHandler.params))\n    ) {\n      await new Promise((resolve) =>\n        setTimeout(resolve, mockHandler.delay * 1000 || 0)\n      );\n\n      res =\n        typeof mockHandler.response === \"function\"\n          ? mockHandler.response(params)\n          : mockHandler.response;\n    } else {\n      // Make actual API request \n      res = await fetch(\n        (!path.startsWith(\"http\") && baseURL) + path + paramsGETRequest,\n        fetchParams\n      ).catch((e) => {\n        throw new Error(e);\n      });\n\n      //get response type\n      let type = res.headers.get(\"content-type\");\n      res = await (type ? type.includes(\"application/json\")\n        ? res.json()\n        : type.includes(\"application/pdf\") ||\n          type.includes(\"application/octet-stream\")\n        ? res.blob()\n        : res.text() : res.json() ).catch(e => {\n          throw new Error(\"Error parsing response: \" + e);\n        });\n\n      if (res?.startsWith && res?.startsWith(\"{\")) res = JSON.parse(res);\n    }\n\n    // Clear loading state\n    delete response.isLoading;\n    const elapsedTime = (\n      (Number(new Date()) - Number(startTime)) /\n      1000\n    ).toFixed(1);\n\n    // Log debug information if enabled\n    if (debug) {\n      log(\n        \"Path:\" +\n          baseURL +\n          path +\n          paramsGETRequest +\n          \"\\n\" +\n          JSON.stringify(options, null, 2) +\n          \"\\nTime: \" +\n          elapsedTime +\n          \"s\\nResponse: \" +\n          printStructureJSON(res)\n      );\n      // allows user to expand and collapse the object in console\n      console.log(res);\n    }\n\n    //if not object, return \n    if (typeof res === \"undefined\") return;\n\n    // Update response object with results, handling pagination\n    for (let key of Object.keys(res))\n      response[key] =\n        paginateResult == key && response[key]?.length\n          ? [...response[key], ...res[key]]\n          : res[key];\n\n    // Store request/response data for future reference\n    grab.log.unshift({\n      path,\n      request: JSON.stringify({...params, paginateKey: undefined}),\n      response,\n      lastFetchTime: Date.now(),\n    });\n\n    return response;\n  } catch (error) {\n    log(\n      \"Error: \" + error.message + \"\\nPath:\" + baseURL + path + JSON.stringify(params),\n      true,\n      \"color: red;\"\n    );\n\n    // Handle errors, with optional retry\n    if (options.retryOnError)\n      return await grab(path, response, { ...options, retryOnError: false });\n    // update error in response\n    if (!error.message.includes(\"signal\")) \n        response.error = error.message;\n    delete response.isLoading;\n    // update error in log\n    grab.log?.unshift({\n      path,\n      request: JSON.stringify(params),\n      error: error.message,\n    });\n    return response;\n  }\n}\n\n/**\n * Logs messages to the console with custom styling,\n * showing debug output in development and standard logs in production.\n * Pretty print JSON with description of structure layout.\n * @param {string|object} message - The message to log. If an object is provided, it will be stringified.\n * @param {boolean} [hideInProduction] -  default = auto-detects based on hostname.\n *  If true, uses `console.debug` (hidden in production). If false, uses `console.log`.\n * @param {string} [style] default=\"color: blue; font-size: 15px;\"] - CSS style string for the console output.\n */\nexport function log(\n  message,\n  hideInProduction = undefined,\n  style = \"color: blue; font-size: 14px;\"\n) {\n  if (typeof hideInProduction === \"undefined\")\n    hideInProduction = window?.location.hostname.includes(\"localhost\");\n  // pretty print JSON with description of structure layout\n  if (typeof message === \"object\")\n    message =\n      printStructureJSON(message) + \"\\n\\n\" + JSON.stringify(message, null, 2);\n\n  if (hideInProduction) console.debug((style ? \"%c\" : \"\") + message, style);\n  else console.log((style ? \"%c\" : \"\") + message, style);\n}\n\n/**\n * Generates TypeDoc-like string of layout of nested JSON object.\n * @param {Object} obj - The JSON object to describe.\n * @returns {string} A string of the object's structure.\n * @example { name: string, age: number, pets: Array<string>}\n */\nexport function printStructureJSON(obj) {\n  function getType(value) {\n    if (Array.isArray(value)) {\n      return '['+getType(value[0]) + ']';\n    } else if (value === null) {\n      return \"null\";\n    } else if (typeof value === \"object\") {\n      return printStructureJSON(value);\n    } else if (typeof value === \"string\") {\n      return `\"\"`;\n    } else if (typeof value === \"boolean\") {\n      return `bool`;\n    } else {\n      return typeof value;\n    }\n  }\n\n  if (typeof obj !== \"object\" || obj === null) {\n    return getType(obj);\n  }\n\n  let result = \"{\";\n  const keys = Object.keys(obj);\n  keys.forEach((key, index) => {\n    result += `${key}: ${getType(obj[key])}`;\n    if (index < keys.length - 1) {\n      result += \", \";\n    }\n  });\n  result += \"}\";\n  return result;\n}\n\nconst grab.log = [];\nconst grabServer = {};\nconst grabDefaults = {};\n\n// Add globals to window in browser, or global in Node.js\nif (typeof window !== \"undefined\") {\n  window.grab = grab;\n  window.log = log;\n  window.grab.log = grab.log;\n  window.grab.server = grabServer;\n  window.grab.defaults = grabDefaults;\n} else if (typeof global !== \"undefined\") {\n  global.grab.log = grab.log;\n  global.grab.server = grab.server;\n  global.grab.defaults = grab.defaults;\n  global.grab = grab;\n  global.log = log;\n}\n\nexport default grab;\n"],"names":["async","grab","path","response","options","headers","method","cache","timeout","baseURL","process","_a","env","SERVER_API_URL","cancelOngoingIfNew","cancelNewIfOngoing","rateLimit","debug","_c","_b","window","location","hostname","includes","paginateResult","paginateKey","setDefaults","retryOnError","params","_d","defaults","_e","global","paramsAsText","JSON","stringify","priorRequest","grab.log","find","e","request","isRepeatRequest","pageNumber","currentPage","key","Object","keys","res","isLoading","lastFetchTime","Date","now","Error","controller","abort","unshift","AbortController","fetchParams","Accept","body","redirect","signal","_g","_f","AbortSignal","paramsGETRequest","URLSearchParams","toString","startTime","mockHandler","_h","server","fetch","startsWith","catch","type","get","json","blob","text","parse","Promise","resolve","setTimeout","delay","elapsedTime","Number","toFixed","log","printStructureJSON","console","_i","length","error","message","hideInProduction","style","obj","getType","value","Array","isArray","result","forEach","index","grabServer","grabDefaults"],"mappings":"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"}