{"version":3,"file":"grab-api.umd.js","sources":["../src/log.js","../src/grab-api.js"],"sourcesContent":["\n/**\n * ### Colorized Log With JSON Structure\n * ![Debug log](https://i.imgur.com/R8Qp6Vg.png)  \n * Logs messages to the console with custom styling,\n * prints JSON with description of structure layout, \n * and showing debug output in development only.\n * @param {string|object} message - The message to log. If an object is provided, it will be stringified.\n * @param {boolean} [hideInProduction] -  default = auto-detects based on hostname.\n *  If true, uses `console.debug` (hidden in production). If false, uses `console.log`.\n * @param {string} [style] default='color: blue; font-size: 15px' - CSS style string \n */\nexport function log(\n  message,\n  hideInProduction = undefined,\n  style = \"color: blue; font-size: 13pt;\"\n) {\n  if (typeof hideInProduction === \"undefined\")\n    hideInProduction = window?.location.hostname.includes(\"localhost\");\n  // pretty print JSON with description of structure layout\n  if (typeof message === \"object\")\n    message =\n      printStructureJSON(message) + \"\\n\\n\" + JSON.stringify(message, null, 2);\n\n  if (hideInProduction) console.debug((style ? \"%c\" : \"\") + message, style);\n  else console.log((style ? \"%c\" : \"\") + message, style);\n}\n\n\n\n\n\n// ANSI color codes (for Node.js)\nconst colors = {\n  reset: \"\\x1b[0m\",\n  yellow: \"\\x1b[33m\",    // string\n  cyan: \"\\x1b[36m\",      // number\n  magenta: \"\\x1b[35m\",   // boolean\n  gray: \"\\x1b[90m\",      // null\n  green: \"\\x1b[32m\",     // object braces\n  blue: \"\\x1b[34m\",      // array brackets\n  red: \"\\x1b[31m\",       // function\n  white: \"\\x1b[37m\",     // default\n};\n\nfunction getColorForType(value) {\n  if (typeof value === \"string\") return colors.yellow;\n  if (typeof value === \"number\") return colors.cyan;\n  if (typeof value === \"boolean\") return colors.magenta;\n  if (typeof value === \"function\") return colors.red;\n  if (value === null) return colors.gray;\n  if (Array.isArray(value)) return colors.blue;\n  if (typeof value === \"object\") return colors.green;\n  return colors.white;\n}\n\nfunction getTypeString(value) {\n  if (typeof value === \"string\") return '\"\"';\n  if (typeof value === \"number\") return \"number\";\n  if (typeof value === \"boolean\") return \"bool\";\n  if (typeof value === \"function\") return \"function\";\n  if (value === null) return \"null\";\n  if (Array.isArray(value)) {\n    if (value.length)\n      return \"[\" + getTypeString(value[0]) + \"]\";\n    else\n      return \"[]\";\n  }\n  if (typeof value === \"object\") return \"{...}\";\n  return typeof value;\n}\n\nexport function printStructureJSON(obj, indent = 0) {\n  const pad = \"  \".repeat(indent);\n\n  // Handle primitives and null\n  if (typeof obj !== \"object\" || obj === null) {\n    const color = getColorForType(obj);\n    return color + getTypeString(obj) + colors.reset;\n  }\n\n  // Handle arrays\n  if (Array.isArray(obj)) {\n    let result = colors.blue + \"[\" + colors.reset;\n    if (obj.length) result += \"\\n\";\n    obj.forEach((item, idx) => {\n      result += pad + \"  \" + printStructureJSON(item, indent + 1);\n      if (idx < obj.length - 1) result += \",\";\n      result += \"\\n\";\n    });\n    result += pad + colors.blue + \"]\" + colors.reset;\n    return result;\n  }\n\n  // Handle objects\n  let result = colors.green + \"{\" + colors.reset;\n  const keys = Object.keys(obj);\n  if (keys.length) result += \"\\n\";\n  keys.forEach((key, index) => {\n    const value = obj[key];\n    const color = getColorForType(value);\n    result += pad + \"  \";\n    if (typeof value === \"object\" && value !== null && !Array.isArray(value)) {\n      // For nested objects, colorize key, then recurse for value\n      result += color + key + colors.reset + \": \" + printStructureJSON(value, indent + 1);\n    } else if (Array.isArray(value)) {\n      // For arrays, colorize key, then recurse for value\n      result += color + key + colors.reset + \": \" + printStructureJSON(value, indent + 1);\n    } else {\n      // For primitives\n      result += color + key + \": \" + getTypeString(value) + colors.reset;\n    }\n    if (index < keys.length - 1) result += \",\";\n    result += \"\\n\";\n  });\n  result += pad + colors.green + \"}\" + colors.reset;\n  if (indent === 0) {\n    console.log(result);\n  }\n  return result;\n}\n\n\n/**\n * Shows message in a modal overlay with concatenation \n * of messages, scroll large messages, and easy dismissal.\n * @param {string} msg - The message to display\n */\nexport function showAlert(msg) {\n  let o = document.getElementById('alert-overlay'), list;\n  if (!o) {\n    o = document.body.appendChild(document.createElement('div'));\n    o.id = 'alert-overlay';\n    o.style = \"position:fixed;inset:0;z-index:9999;background:rgba(0,0,0,0.5);display:flex;align-items:center;justify-content:center\";\n    o.innerHTML = `<div id=\"alert-box\" style=\"background:#fff;padding:1.5em 2em;border-radius:8px;box-shadow:0 2px 16px #0003;min-width:220px;max-height:80vh;position:relative;display:flex;flex-direction:column;\">\n      <button id=\"close-alert\" style=\"position:absolute;top:12px;right:20px;font-size:1.5em;background:none;border:none;cursor:pointer;color:black;\">&times;</button>\n      <div id=\"alert-list\" style=\"overflow:auto;flex:1;\"></div>\n    </div>`;\n    o.addEventListener('click', e => { if (e.target === o) o.remove(); });\n    o.querySelector('#close-alert').onclick = () => o.remove();\n    list = o.querySelector('#alert-list');\n  } else {\n    list = o.querySelector('#alert-list');\n  }\n  list.innerHTML += `<div style=\"font-size:1.2em;margin:0.5em 0;\">${msg}</div>`;\n}","import { printStructureJSON, log, showAlert } from \"./log.js\";\n\n/**\n * ### GRAB: Generate Request to API from Browser\n * ![GrabAPILogo](https://i.imgur.com/qrQWkeb.png)\n * \n * 1. **One Function**: 2Kb min, 0 dependencies, minimal boilerplate syntax - [better than top alternatives](https://grab.js.org/guide/Comparisons) \n * 2. **Auto-JSON Convert**: Pass parameters and get response or error in JSON, handling other data types as is.\n * 3. **isLoading Status**: Sets `.isLoading=true` on the pre-initialized response object so you can show a \"Loading...\" in any framework\n * 4. **Debug Logging**: Adds global `log()` and prints colored JSON structure, response, timing for requests in test.\n * 5. **Mock Server Support**: Configure `window.grab.mock` for development and testing environments\n * 6. **Concurrency Handling**: Prevent this request if one is ongoing to same path & params, or cancel the ongoing request.\n * 7. **Timeout & Retry**: Customizable request timeout, default 20s, and auto-retry on error\n * 8. **Rate Limiting**: Built-in rate limiting to prevent multi-click cascading responses, require to wait seconds between requests.\n * 9. **Request History**: Stores all request and response data in global `grab.log` object\n * 10. **Pagination Infinite Scroll**: Built-in pagination for infinite scroll to auto-load and merge next result page.\n * 11. **Base URL Based on Environment**: Configure `grab.defaults.baseURL` once at the top, overide with `SERVER_API_URL` in `.env` or `process.env.SERVER_API_URL` in Node.js.\n * 12. **Frontend Cache**: Set cache headers and retrieve from frontend memory for repeat requests to static data.\n * 13. **Modular Design**: Can be used in any frontend framework, Node.js 18+, Bun, Deno, Cloudflare Workers, etc.\n * 14. **Framework Agnostic**: Alternatives like TanStack work only in component initialization and depend on React & others. \n * 15. **Globals**: Adds to window in browser or global in Node.js so you only import once: `grab()`, `log()`, `grab.log`, `grab.mock`, `grab.defaults`\n * 16. **TypeScript Tooltips**: Developers can hover over option names and autocomplete TypeScript. Add to top of file: `import 'grab-api.js/globals'`\n * \n * @param {string} path The full URL path OR relative path on this server after `grab.defaults.baseURL`\n * @param {object} [options={}] Request params for GET or body for POST/PUT/PATCH and utility options\n * @param {string} [options.method] default=\"GET\" The HTTP method to use\n * @param {object} [options.response] Pre-initialized object to set the response in. isLoading and error are also set on this object.\n * @param {boolean} [options.cancelOngoingIfNew]  default=true Cancel previous requests to same path\n * @param {boolean} [options.cancelNewIfOngoing] default=false Cancel if a request to path is in progress\n * @param {boolean} [options.cache] default=false Whether to cache the request and from frontend cache\n * @param {boolean} [options.debug] default=false Whether to log the request and response\n * @param {number} [options.timeout] default=20 The timeout for the request in seconds\n * @param {number} [options.rateLimit] default=0 If set, how many seconds to wait between requests\n * @param {string} [options.paginateResult]  The key to paginate result data by\n * @param {string} [options.paginateKey] default=\"\" The key to paginate the request by\n * @param {string} [options.baseURL] default='/api/' base url prefix, override with SERVER_API_URL env\n * @param {boolean} [options.setDefaults] default=false Pass this with options to set\n *  those options as defaults for all requests.\n * @param {number} [options.retryAttempts] default=0 Retry failed requests this many times\n * @param {number} [options.repeat] default=0 Repeat request this many times\n * @param {number} [options.repeatEvery] default=null Repeat request every seconds\n * @param {function} [options.logger] default=log Custom logger to override the built-in color JSON log()\n * @param {function} [options.onBeforeRequest] Set with defaults to modify each request data. Takes and returns in order: path, response, params, fetchParams\n * @param {function} [options.onAfterRequest] Set with defaults to modify each request data. Takes and returns in order: path, response, params, fetchParams\n * @param {any} [...params] All other params become GET params, POST body, and other methods.\n * @returns {Promise<Object>} The response object with resulting data or .error if error.\n * @author [vtempest (2025)](https://github.com/vtempest/grab-api)\n * @see  [🎯 Examples](https://grab.js.org/guide/Examples) [📑 Docs](https://grab.js.org)\n * @example import { grab } from \"grab-api.js\";\n  let res = {};\n  await grab('search', {\n    response: res,\n    query: \"search words\"\n  })\n */\nexport async function grab(path, options = {}) {\n  let {\n    headers,\n    response = {}, // Pre-initialized object to set the response in. isLoading and error are also set on this object.\n    method = options.post\n      ? \"POST\"\n      : options.put\n      ? \"PUT\"\n      : options.patch\n      ? \"PATCH\"\n      : options.delete\n      ? \"DELETE\"\n      : \"GET\", // set post: true for POST, omit for GET\n    cache = false, // Enable/disable frontend caching\n    timeout = 20, // Request timeout in seconds\n    baseURL = (typeof process !== \"undefined\" &&\n      process?.env?.SERVER_API_URL) ||\n      \"/api/\", // Use env var or default to /api/\n    cancelOngoingIfNew = true, // Cancel previous request for same path\n    cancelNewIfOngoing = false, // Don't make new request if one is ongoing\n    rateLimit = 0, // Minimum seconds between requests\n    debug = window?.location?.hostname?.includes(\"localhost\"), // Auto-enable debug on localhost\n    paginateResult = null, // Key to paginate in response\n    paginateKey = null, // Request param for pagination\n    setDefaults = false, // Set these options as defaults for future requests\n    retryAttempts = 0, // Retry failed requests once\n    logger = log, // Custom logger to override the built-in color JSON log()\n    onBeforeRequest = null, // Hook to modify request data before request is made\n    onAfterRequest = null, // Hook to modify request data after request is made\n    repeatEvery = null, // Repeat request every seconds\n    repeat = 0, // Repeat request this many times\n    debounce = null, // Debounce request this many milliseconds\n    ...params // All other params become request params/query\n  } = {\n    // Destructure options with defaults, merging with any globally set defaults\n    ...(window?.grab?.defaults || global?.grab?.defaults || {}),\n    ...options,\n  };\n\n  try {\n    // Handle repeat and repeatEvery\n    if (repeat > 1) {\n      for (let i = 0; i < repeat; i++) {\n        await grab(path, { ...options, repeat: 0 });\n      }\n      return response;\n    }\n    if (repeatEvery) {\n      setInterval(async () => {\n        await grab(path, { ...options, repeat: 0, repeatEvery: null });\n      }, repeatEvery * 1000);\n      return response;\n    }\n\n    // Store options as defaults if setDefaults flag is true\n    if (options?.setDefaults) {\n      if (typeof window !== \"undefined\")\n        window.grab.defaults = { ...options, setDefaults: undefined };\n      else global.grab.defaults = { ...options, setDefaults: undefined };\n      \n  \n\n      return {};\n    }\n\n    // response can be a function in React like setResults\n    let resFunction = typeof response === \"function\" ? response : null;\n    // Initialize response object if not provided\n    if (!response || resFunction) response = {};\n\n    // Find prior request in log same path and params, ignoring the \"page\" or similar page key\n    let paramsAsText = JSON.stringify(\n      paginateKey ? { ...params, [paginateKey]: undefined } : params\n    );\n    let priorRequest = grab.log?.find(\n      (e) => e.request == paramsAsText && e.path == path\n    );\n\n    // Handle response clearing/caching based on pagination\n    if (!paginateKey) {\n      // Return cached response if enabled and request is identical\n      if (cache && priorRequest) {\n        for (let key of Object.keys(priorRequest.res))\n          response[key] = priorRequest.res[key];\n        if (resFunction) response = resFunction(response);\n        return response;\n      }\n\n      // Clear previous response data\n      for (let key of Object.keys(response)) response[key] = undefined;\n    } else {\n      // Handle pagination - track current page and append results\n      let pageNumber =\n        priorRequest?.currentPage + 1 || params?.[paginateKey] || 1;\n\n      //clear response if not repeat request, new params\n      if (!priorRequest) {\n        response[paginateResult] = [];\n        pageNumber = 1;\n      }\n\n      //update current page on prior request\n      if (priorRequest) priorRequest.currentPage = pageNumber;\n      params[paginateKey] = pageNumber;\n    }\n\n    // Set loading state\n    response.isLoading = true;\n    if (resFunction) response = resFunction(response);\n\n    // Enforce rate limiting if enabled\n    if (\n      rateLimit > 0 &&\n      priorRequest?.lastFetchTime &&\n      priorRequest.lastFetchTime > Date.now() - 1000 * rateLimit\n    )\n      throw new Error(\n        \"Fetch rate limit exceeded for \" +\n          path +\n          \". Wait \" +\n          rateLimit +\n          \"s between requests.\"\n      );\n\n    // Handle request cancellation logic\n    if (priorRequest?.controller)\n      if (cancelOngoingIfNew) priorRequest.controller.abort();\n      else if (cancelNewIfOngoing) return { isLoading: true };\n\n    // Setup new request tracking\n    grab.log.unshift({\n      path,\n      request: paramsAsText,\n      lastFetchTime: Date.now(),\n      controller: new AbortController(),\n    });\n\n    // Configure fetch parameters\n    let fetchParams = {\n      method,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        ...headers,\n      },\n      redirect: \"follow\",\n      cache: cache ? \"force-cache\" : \"no-store\",\n      signal: cancelOngoingIfNew\n        ? grab.log[0]?.controller?.signal\n        : AbortSignal.timeout(timeout * 1000),\n    };\n\n    // Format request params/query params based on method\n    let paramsGETRequest = \"\";\n    if ([\"POST\", \"PUT\", \"PATCH\"].includes(method))\n      fetchParams.body = params.body || JSON.stringify(params);\n    else paramsGETRequest = \"?\" + new URLSearchParams(params).toString();\n\n    //hook all requests before request intercept to modify data\n    if (typeof beforeRequest === \"function\")\n      [path, response, params, fetchParams] = onBeforeRequest(\n        path,\n        response,\n        params,\n        fetchParams\n      );\n\n    // Handle path and baseURL, if path is absolute, ignore baseURL\n    if (!path.startsWith(\"/\") && !baseURL.endsWith(\"/\")) path = \"/\" + path;\n    if (path.startsWith(\"http:\") || path.startsWith(\"https:\")) baseURL = \"\";\n\n    // Handle mock server responses if configured\n    let res = null,\n      startTime = new Date(),\n      mockHandler = grab.mock?.[path];\n\n    let wait = (s) => new Promise((res) => setTimeout(res, s * 1000 || 0));\n\n    if (\n      mockHandler &&\n      (!mockHandler.params || mockHandler.method == method) &&\n      (!mockHandler.params ||\n        paramsAsText == JSON.stringify(mockHandler.params))\n    ) {\n      await wait(mockHandler.delay);\n\n      res =\n        typeof mockHandler.response === \"function\"\n          ? mockHandler.response(params)\n          : mockHandler.response;\n    } else {\n      // Make actual API request\n      res = await fetch(baseURL + path + paramsGETRequest, fetchParams).catch(\n        (e) => {\n          throw new Error(e);\n        }\n      );\n\n      //get response type\n      let type = res.headers.get(\"content-type\");\n      res = await (type\n        ? type.includes(\"application/json\")\n          ? res.json()\n          : type.includes(\"application/pdf\") ||\n            type.includes(\"application/octet-stream\")\n          ? res.blob()\n          : res.text()\n        : res.json()\n      ).catch((e) => {\n        throw new Error(\"Error parsing response: \" + e);\n      });\n\n      if (res?.startsWith && res?.startsWith(\"{\")) res = JSON.parse(res);\n    }\n\n    //hook all requests before request intercept to modify data\n    if (typeof afterRequest === \"function\")\n      [path, response, params, fetchParams] = onAfterRequest(\n        path,\n        response,\n        params,\n        fetchParams\n      );\n\n    // Clear loading state\n    delete response.isLoading;\n\n    delete priorRequest?.controller;\n\n    // Log debug information if enabled\n\n    const elapsedTime = (\n      (Number(new Date()) - Number(startTime)) /\n      1000\n    ).toFixed(1);\n    if (debug) {\n      log(\n        \"Path:\" +\n          baseURL +\n          path +\n          paramsGETRequest +\n          \"\\n\" +\n          JSON.stringify(options, null, 2) +\n          \"\\nTime: \" +\n          elapsedTime +\n          \"s\\nResponse: \" +\n          printStructureJSON(res)\n      );\n      // allows user to expand and collapse the object in console\n      console.log(res);\n    }\n\n    //if not object, return\n    if (typeof res === \"undefined\") return;\n\n    // Update response object with results, handling pagination\n    for (let key of Object.keys(res))\n      response[key] =\n        paginateResult == key && response[key]?.length\n          ? [...response[key], ...res[key]] // concat with existing results\n          : res[key]; // set new results\n\n    // Store request/response data for future reference\n    grab.log.unshift({\n      path,\n      request: JSON.stringify({ ...params, paginateKey: undefined }),\n      response,\n      lastFetchTime: Date.now(),\n    });\n\n    if (resFunction) response = resFunction(response);\n\n    return response;\n  } catch (error) {\n    let errorMessage =\n      \"Error: \" +\n      error.message +\n      \"\\nPath:\" +\n      baseURL +\n      path +\n      JSON.stringify(params);\n\n    if (debug) showAlert(errorMessage);\n\n    log(errorMessage, true, \"color: red;\");\n\n    // Handle errors, with optional retry\n    if (options.retryAttempts > 0)\n      return await grab(path, response, {\n        ...options,\n        retryAttempts: --options.retryAttempts,\n      });\n    // update error in response\n    if (!error.message.includes(\"signal\")) response.error = error.message;\n    delete response.isLoading;\n    // update error in log\n    grab.log?.unshift({\n      path,\n      request: JSON.stringify(params),\n      error: error.message,\n    });\n    if (typeof options.response === \"function\") \n      response = options.response(response);\n    return response;\n  }\n}\n\n/**\n * Creates a new instance of grab with default options\n * to apply to all requests made by this instance\n * @param {Object} defaultOptions - options for all requests by instance\n * @returns {Function} grab() function using those options\n*/\ngrab.instance =\n  (defaultOptions = {}) =>\n  (path, options = {}) =>\n    grab(path, { ...defaultOptions, ...options });\n\n    //keyboard shortcut to toggle debug\ndocument.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"i\" && e.ctrlKey) {\n    //creeate html of the grab.log requests\n    let html = \" \";\n    for (let request of grab.log) {\n      html += `<div style=\"margin-bottom:1em; border-bottom:1px solid #ccc; padding-bottom:1em;\">\n        <b>Path:</b> ${request.path}<br>\n        <b>Request:</b> ${request.request}<br>\n        <b>Response:</b> ${JSON.stringify(request.response, null, 2)}<br>\n        <b>Time:</b> ${new Date(request.lastFetchTime).toLocaleString()}\n      </div>`;\n    }\n    showAlert(html);\n\n  }\n});\n\n\n// Add globals to window in browser, or global in Node.js\nif (typeof window !== \"undefined\") {\n  window.grab = grab;\n  window.log = log;\n  window.grab.log = [];\n  window.grab.mock = {};\n  window.grab.defaults = {};\n} else if (typeof global !== \"undefined\") {\n  global.grab = grab;\n  global.log = log;\n  global.grab.log = [];\n  global.grab.mock = {};\n  global.grab.defaults = {};\n}\n\n/**\n * TODO\n *  - pagination working\n *  - react tests\n *  - progress\n *  - grab error popup and dev tool\n *  - tests in stackblitz\n *  - loading icons\n *  - repeat every\n *  - show net log in alert\n */\n"],"names":["log","message","hideInProduction","style","window","location","hostname","includes","printStructureJSON","JSON","stringify","console","debug","colors","reset","yellow","cyan","magenta","gray","green","blue","red","white","getColorForType","value","Array","isArray","getTypeString","length","obj","indent","pad","repeat","result","forEach","item","idx","keys","Object","key","index","color","showAlert","msg","list","o","document","getElementById","body","appendChild","createElement","id","innerHTML","addEventListener","e","target","remove","querySelector","onclick","async","grab","path","options","headers","response","method","post","put","patch","delete","cache","timeout","baseURL","process","_a","env","SERVER_API_URL","cancelOngoingIfNew","cancelNewIfOngoing","rateLimit","_c","_b","paginateResult","paginateKey","setDefaults","retryAttempts","logger","onBeforeRequest","onAfterRequest","repeatEvery","debounce","params","_d","defaults","_e","global","i","setInterval","resFunction","paramsAsText","priorRequest","_f","find","request","pageNumber","currentPage","res","isLoading","lastFetchTime","Date","now","Error","controller","abort","unshift","AbortController","fetchParams","Accept","redirect","signal","_h","_g","AbortSignal","paramsGETRequest","URLSearchParams","toString","beforeRequest","startsWith","endsWith","startTime","mockHandler","_i","mock","wait","s","Promise","setTimeout","fetch","catch","type","get","json","blob","text","parse","delay","afterRequest","elapsedTime","Number","toFixed","_j","error","errorMessage","_k","instance","defaultOptions","ctrlKey","html","toLocaleString"],"mappings":"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"}