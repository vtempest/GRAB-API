{"version":3,"file":"types.esm.js","sources":["../src/index.d.ts"],"sourcesContent":["/**\n * TypeScript definitions for GRAB API\n * Generate Request to API from Browser\n */\n\n// Core response object that gets populated with API response data\nexport interface GrabResponse<T = any> {\n    /** Indicates if request is currently in progress */\n    isLoading?: boolean;\n    /** Error message if request failed */\n    error?: string;\n    /** The actual response data - type depends on API endpoint */\n    [key: string]: T | boolean | string | undefined;\n  }\n  \n  // Options for configuring grab requests\n  export interface GrabOptions<TResponse = any, TParams = Record<string, any>> {\n    /** HTTP method to use */\n    method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'HEAD' | 'OPTIONS';\n    \n    /** Pre-initialized response object that will be populated with results */\n    response?: GrabResponse<TResponse>;\n    \n    /** Additional HTTP headers */\n    headers?: Record<string, string>;\n    \n    /** Cancel previous requests to same path when making new request */\n    cancelOngoingIfNew?: boolean;\n    \n    /** Cancel new request if one to same path is already in progress */\n    cancelNewIfOngoing?: boolean;\n    \n    /** Enable frontend caching for repeat requests */\n    cache?: boolean;\n    \n    /** Request timeout in seconds */\n    timeout?: number;\n    \n    /** Base URL prefix for API requests */\n    baseURL?: string;\n    \n    /** Minimum seconds to wait between requests to same endpoint */\n    rateLimit?: number;\n    \n    /** Enable debug logging */\n    debug?: boolean;\n    \n    /** Key in response object to paginate results by */\n    paginateResult?: string;\n    \n    /** Request parameter key used for pagination */\n    paginateKey?: string;\n    \n    /** Set these options as defaults for all future requests */\n    setDefaults?: boolean;\n    \n    /** Retry failed requests once */\n    retryAttempts?: boolean;\n    \n    /** Hook function called before each request to modify request data */\n    onBeforeRequest?: (\n      path: string,\n      response: GrabResponse<TResponse>,\n      params: TParams,\n      fetchParams: RequestInit\n    ) => [string, GrabResponse<TResponse>, TParams, RequestInit];\n  }\n  \n  // Combined options and parameters interface\n  export interface GrabRequestConfig<TResponse = any, TParams = Record<string, any>> \n    extends GrabOptions<TResponse, TParams>, TParams {}\n  \n  // Mock server configuration for testing\n  export interface GrabMockHandler<TParams = any, TResponse = any> {\n    /** Mock response data or function that returns response */\n    response: TResponse | ((params: TParams) => TResponse);\n    /** HTTP method this mock should respond to */\n    method?: string;\n    /** Request parameters this mock should match */\n    params?: TParams;\n    /** Delay in seconds before returning mock response */\n    delay?: number;\n  }\n  \n  // Request log entry for debugging and history\n  export interface GrabLogEntry {\n    /** API path that was requested */\n    path: string;\n    /** Stringified request parameters */\n    request: string;\n    /** Response data (only present for successful requests) */\n    response?: any;\n    /** Error message (only present for failed requests) */\n    error?: string;\n    /** Timestamp when request was made */\n    lastFetchTime: number;\n    /** Abort controller for request cancellation */\n    controller?: AbortController;\n    /** Current page number for paginated requests */\n    currentPage?: number;\n  }\n  \n  // Global grab configuration and state\n  export interface GrabGlobal {\n    /** Default options applied to all requests */\n    default: Partial<GrabOptions>;\n    /** Request history and debugging info */\n    log: GrabLogEntry[];\n    /** Mock server handlers for testing */\n    mock: Record<string, GrabMockHandler>;\n  }\n  \n  // Main grab function signature with overloads for different use cases\n  export interface GrabFunction {\n    /** \n     * Make API request with just path \n     */\n    <TResponse = any>(path: string): Promise<GrabResponse<TResponse>>;\n    \n    /** \n     * Make API request with path and options/parameters \n     */\n    <TResponse = any, TParams = Record<string, any>>(\n      path: string,\n      config: GrabRequestConfig<TResponse, TParams>\n    ): Promise<GrabResponse<TResponse>>;\n    \n    /** Global configuration and state */\n    default: Partial<GrabOptions>;\n    log: GrabLogEntry[];\n    mock: Record<string, GrabMockHandler>;\n  }\n  \n  // Log function for debugging\n  export interface LogFunction {\n    /**\n     * Log messages with custom styling\n     * @param message - Message to log (string or object)\n     * @param hideInProduction - Whether to hide in production (auto-detected if undefined)\n     * @param style - CSS style string for console output\n     */\n    (\n      message: string | object,\n      hideInProduction?: boolean,\n      style?: string\n    ): void;\n  }\n  \n  // Utility function to describe JSON structure\n  export interface PrintStructureJSONFunction {\n    /**\n     * Generate TypeDoc-like description of JSON object structure\n     * @param obj - The JSON object to describe\n     * @returns String representation of object structure\n     */\n    (obj: any): string;\n  }\n  \n  // Window/Global extensions\n  declare global {\n    interface Window {\n      grab: GrabFunction;\n      log: LogFunction;\n    }\n    \n    var grab: GrabFunction;\n    var log: LogFunction;\n  }\n  \n  // Main export types\n  export declare const grab: GrabFunction;\n  export declare const log: LogFunction;\n  export declare const printStructureJSON: PrintStructureJSONFunction;\n  \n  // Type helpers for common use cases\n  export type GrabResponseWithData<T> = GrabResponse<T> & {\n    data?: T;\n  };\n  \n  export type GrabResponseWithResults<T> = GrabResponse<T> & {\n    results?: T[];\n  };\n  \n  export type GrabResponseWithPagination<T> = GrabResponseWithResults<T> & {\n    page?: number;\n    totalPages?: number;\n    hasMore?: boolean;\n  };\n  \n  // Utility types for type-safe API calls\n  export type ApiEndpoint<TResponse, TParams = {}> = (\n    params?: TParams & Partial<GrabOptions<TResponse, TParams>>\n  ) => Promise<GrabResponse<TResponse>>;\n  \n  // Example usage types for common patterns\n  export interface UserData {\n    id: number;\n    name: string;\n    email: string;\n  }\n  \n  export interface SearchResult {\n    title: string;\n    description: string;\n    url: string;\n  }\n  \n  export interface PaginatedResponse<T> {\n    results: T[];\n    page: number;\n    totalPages: number;\n    hasMore: boolean;\n  }\n  \n  // Helper type for creating typed API clients\n  export type TypedGrabFunction = <TResponse = any, TParams = Record<string, any>>(\n    path: string,\n    config?: GrabRequestConfig<TResponse, TParams>\n  ) => Promise<GrabResponse<TResponse>>;\n  \n  export default grab;"],"names":[],"mappings":"AA4NE,MAAA,SAAe;"}