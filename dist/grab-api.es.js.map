{"version":3,"file":"grab-api.es.js","sources":["../src/grab-api.js"],"sourcesContent":["/**\n * ### GRAB: Generate Request to API from Browser\n * ![grabAPILogo](https://i.imgur.com/qrQWkeb.png)\n * \n * 1. **Data Retrieval**: Fetches data from server APIs using JSON parameters and returns JSON responses or error objects\n * 2. **Minimalist One Function**: 2Kb min.js less boilerplate complexity than axios, SuperAgent, Tanstack, Alova, SWR, TanStack, apisauce, bent\n * 3. **Automatic Loading States**: Sets `isLoading` to `true` during data fetching operations and `false` upon completion\n * 4. **Mock Server Support**: Configure `window.grab.server` for development and testing environments\n * 5. **Concurrent Request Handling**: Cancels duplicate or overlapping requests automatically\n * 6. **Timeout Configuration**: Customizable request timeout settings\n * 7. **Rate Limiting**: Built-in rate limiting to prevent API abuse\n * 8. **Debug Logging**: Comprehensive logging system for request monitoring\n * 9. **Request History**: Stores all request and response data in global `grabLog` object\n * 10. **Pagination Support**: Built-in pagination handling for large datasets\n * 11. **Environment Configuration**: Configurable base URLs for development and production environments\n * 12. **Frontend Caching**: Intelligent caching system that prevents redundant API calls for repeat requests\n * 13. **Modular Design**: Single, flexible function that can be called from any part of your application.\n * 14. **Framework Agnostic**: No dependency on React hooks or component lifecycle - works with any JavaScript framework\n * 15. **Universal Usage**:  More flexible than TanStack Query - works outside component initialization, \n * \n * @param {string} path The path in the API after base url\n * @param {object} response Pre-initialized object to store the response in,\n *  isLoading and error are also set on this object.\n * @param {object} [options={}] Request params for GET or POST and more options\n * @param {string} [options.method] default=\"GET\" The HTTP method to use\n * @param {boolean} [options.cancelOngoingIfNew]  default=true Cancel previous requests to same path\n * @param {boolean} [options.cancelNewIfOngoing] default=false Cancel if a request to path is in progress\n * @param {boolean}[options.cache] default=false Whether to cache the request and from frontend cache\n * @param {boolean} [options.debug] default=false Whether to log the request and response\n * @param {number} [options.timeout] default=20 The timeout for the request in seconds\n * @param {number} [options.rateLimit] default=0 If set, how many seconds to wait between requests\n * @param {string} [options.paginateResult] default=null The key to paginate result data by\n * @param {string} [options.paginateKey] default=\"\" The key to paginate the request by\n * @param {string} [options.baseURL] default='/api/' base url prefix, override with SERVER_API_URL env\n * @param {boolean} [options.setDefaults] default=false Pass this with options to set\n *  those options as defaults for all requests.\n * @param {any} *\n * @returns {Promise<Object>} The response from the server API\n * @author [vtempest (2025)](https://github.com/vtempest/grab-api)\n * @example \n  import { grab } from \"grab-api.js\";\n  let res = $state({}) as {\n      results: Array<{title:string}>,\n      isLoading: boolean,\n      error: string,\n  };\n   \n  await grab('search', res, {\n    query: \"search words\",\n    method: 'POST'\n  })\n  //in svelte component\n  {#if res.results}\n      {res.results}\n  {:else if res.isLoading}\n      ...\n  {:else if res.error}\n      {res.error}\n  {/if}\n\n  //Setup Mock testing server, response is object or function\n  window.grab.server[\"search\"] = {\n    response: (params) => {\n      return { results: [{title:`Result about ${params.query}`}] };\n    },\n    method: \"POST\",\n    params: {\n      query: \"search words\"\n    },\n    delay : 1,\n  };\n\n  //set defaults for all requests\n  grab(\"\", {}, { \n    setDefaults: true,\n    baseURL: \"http://localhost:8080\",\n    timeout: 30,\n    debug: true,\n    rateLimit: 1,\n    cache: true,\n    cancelOngoingIfNew: true,\n    cancelNewIfOngoing: true,\n  });\n */\nexport async function grab(path, response = {}, options = {}) {\n    let {\n      headers,\n      method = \"GET\",\n      cache = false, // Enable/disable frontend caching\n      timeout = 20, // Request timeout in seconds\n      baseURL = (typeof process !== \"undefined\" && process?.env?.SERVER_API_URL) || \"/api/\", // Use env var or default to /api/\n      cancelOngoingIfNew = true, // Cancel previous request for same path\n      cancelNewIfOngoing = false, // Don't make new request if one is ongoing\n      rateLimit = 0, // Minimum seconds between requests\n      debug = window?.location?.hostname?.includes(\"localhost\"), // Auto-enable debug on localhost\n      paginateResult = null, // Key to paginate in response\n      paginateKey = null, // Request param for pagination\n      setDefaults = false, // Set these options as defaults for future requests\n      retryOnError = false, // Retry failed requests once\n      ...params // All other params become request params/query\n    } = {\n      // Destructure options with defaults, merging with any globally set defaults\n      ...(window?.grab?.defaults || global?.grab?.defaults || {}),\n      ...options,\n    };\n\n  try {\n  \n    // Store options as defaults if setDefaults flag is true\n    if (options?.setDefaults) {\n      window.grab.defaults = { ...options, setDefaults: undefined };\n      return {};\n    }\n\n    // Initialize response object if not provided\n    if (!response) response = {};\n\n    let paramsAsText = JSON.stringify({...params, paginateKey: undefined});\n\n    // Initialize tracking for this request path\n    let priorRequest = grabLog?.find(\n      e => e.request == paramsAsText && e.path == path\n    );\n    \n    // Check if this is a repeat request by comparing params\n    // if (priorRequest?.request)\n    //   priorRequest.request[paginateKey] = undefined;\n    const isRepeatRequest = priorRequest?.request == paramsAsText;\n\n    // Handle response clearing/caching based on pagination\n    if (!paginateKey) {\n      // Return cached response if enabled and request is identical\n      if (cache && isRepeatRequest) {\n        for (let key of Object.keys(priorRequest.res))\n          response[key] = priorRequest.res[key];\n        return response;\n      }\n\n      // Clear previous response data\n      for (let key of Object.keys(response)) response[key] = undefined;\n    } else {\n      // Handle pagination - track current page and append results\n      let pageNumber = priorRequest?.currentPage + 1|| params?.[paginateKey] || 1;\n\n      //clear response if not repeat request, new params\n      if (!isRepeatRequest) {\n        response[paginateResult] = [];\n        pageNumber = 1;\n      }\n\n      //update current page on prior request\n      if (priorRequest) \n        priorRequest.currentPage = pageNumber;\n      params[paginateKey] = pageNumber;\n    }\n\n    // Set loading state\n    response.isLoading = true;\n\n    // Enforce rate limiting if enabled\n    if (\n      rateLimit > 0 &&\n      priorRequest?.lastFetchTime &&\n      priorRequest.lastFetchTime > Date.now() - 1000 * rateLimit\n    )\n      throw new Error(\"Fetch rate limit exceeded\");\n\n    // Handle request cancellation logic\n    if (priorRequest?.controller && isRepeatRequest)\n      if (cancelOngoingIfNew) priorRequest.controller.abort();\n      else if (cancelNewIfOngoing) return { isLoading: true };\n\n    // Setup new request tracking\n    grabLog.unshift({\n      path,\n      request: paramsAsText,\n      lastFetchTime: Date.now(),\n      controller: new AbortController(),\n    });\n\n    // Configure fetch parameters\n    const fetchParams = {\n      method,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        ...headers,\n      },\n      body: null,\n      redirect: \"follow\",\n      cache: cache ? \"force-cache\" : \"no-store\",\n      signal: cancelOngoingIfNew\n        ? grabLog[0]?.controller?.signal\n        : AbortSignal.timeout(timeout * 1000),\n    };\n\n    // Format request params/query params based on method\n    let paramsGETRequest = \"\";\n    if ([\"POST\", \"PUT\", \"PATCH\"].includes(method))\n      fetchParams.body = JSON.stringify(params);\n    else paramsGETRequest = \"?\" + new URLSearchParams(params).toString();\n\n    // Handle mock server responses if configured\n    let res = null,\n      startTime = new Date(),\n      mockHandler = grab.server?.[path];\n\n    if (\n      mockHandler &&\n      (!mockHandler.params || mockHandler.method == method) &&\n      (!mockHandler.params ||\n        paramsAsText == JSON.stringify(mockHandler.params))\n    ) {\n      await new Promise((resolve) =>\n        setTimeout(resolve, mockHandler.delay * 1000 || 0)\n      );\n\n      res =\n        typeof mockHandler.response === \"function\"\n          ? mockHandler.response(params)\n          : mockHandler.response;\n    } else {\n      // Make actual API request \n      res = await fetch(\n        (!path.startsWith(\"http\") && baseURL) + path + paramsGETRequest,\n        fetchParams\n      ).catch((e) => {\n        throw new Error(e);\n      });\n\n      //get response type\n      let type = res.headers.get(\"content-type\");\n      res = await (type ? type.includes(\"application/json\")\n        ? res.json()\n        : type.includes(\"application/pdf\") ||\n          type.includes(\"application/octet-stream\")\n        ? res.blob()\n        : res.text() : res.json() ).catch(e => {\n          throw new Error(\"Error parsing response: \" + e);\n        });\n\n      if (res?.startsWith && res?.startsWith(\"{\")) res = JSON.parse(res);\n    }\n\n    // Clear loading state\n    delete response.isLoading;\n    const elapsedTime = (\n      (Number(new Date()) - Number(startTime)) /\n      1000\n    ).toFixed(1);\n\n    // Log debug information if enabled\n    if (debug) {\n      log(\n        \"Path:\" +\n          baseURL +\n          path +\n          paramsGETRequest +\n          \"\\n\" +\n          JSON.stringify(options, null, 2) +\n          \"\\nTime: \" +\n          elapsedTime +\n          \"s\\nResponse: \" +\n          printStructureJSON(res)\n      );\n      // allows user to expand and collapse the object in console\n      console.log(res);\n    }\n\n    //if not object, return \n    if (typeof res === \"undefined\") return;\n\n    // Update response object with results, handling pagination\n    for (let key of Object.keys(res))\n      response[key] =\n        paginateResult == key && response[key]?.length\n          ? [...response[key], ...res[key]]\n          : res[key];\n\n    // Store request/response data for future reference\n    grabLog.unshift({\n      path,\n      request: JSON.stringify({...params, paginateKey: undefined}),\n      response,\n      lastFetchTime: Date.now(),\n    });\n\n    return response;\n  } catch (error) {\n    log(\n      \"Error: \" + error.message + \"\\nPath:\" + baseURL + path + JSON.stringify(params),\n      true,\n      \"color: red;\"\n    );\n\n    // Handle errors, with optional retry\n    if (options.retryOnError)\n      return await grab(path, response, { ...options, retryOnError: false });\n    // update error in response\n    if (!error.message.includes(\"signal\")) \n        response.error = error.message;\n    delete response.isLoading;\n    // update error in log\n    grabLog?.unshift({\n      path,\n      request: JSON.stringify(params),\n      error: error.message,\n    });\n    return response;\n  }\n}\n\n/**\n * Logs messages to the console with custom styling,\n * showing debug output in development and standard logs in production.\n * Pretty print JSON with description of structure layout.\n * @param {string|object} message - The message to log. If an object is provided, it will be stringified.\n * @param {boolean} [hideInProduction] -  default = auto-detects based on hostname.\n *  If true, uses `console.debug` (hidden in production). If false, uses `console.log`.\n * @param {string} [style] default=\"color: blue; font-size: 15px;\"] - CSS style string for the console output.\n */\nexport function log(\n  message,\n  hideInProduction = undefined,\n  style = \"color: blue; font-size: 14px;\"\n) {\n  if (typeof hideInProduction === \"undefined\")\n    hideInProduction = window?.location.hostname.includes(\"localhost\");\n  // pretty print JSON with description of structure layout\n  if (typeof message === \"object\")\n    message =\n      printStructureJSON(message) + \"\\n\\n\" + JSON.stringify(message, null, 2);\n\n  if (hideInProduction) console.debug((style ? \"%c\" : \"\") + message, style);\n  else console.log((style ? \"%c\" : \"\") + message, style);\n}\n\n/**\n * Generates TypeDoc-like string of layout of nested JSON object.\n * @param {Object} obj - The JSON object to describe.\n * @returns {string} A string of the object's structure.\n * @example { name: string, age: number, pets: Array<string>}\n */\nexport function printStructureJSON(obj) {\n  function getType(value) {\n    if (Array.isArray(value)) {\n      return '['+getType(value[0]) + ']';\n    } else if (value === null) {\n      return \"null\";\n    } else if (typeof value === \"object\") {\n      return printStructureJSON(value);\n    } else if (typeof value === \"string\") {\n      return `\"\"`;\n    } else if (typeof value === \"boolean\") {\n      return `bool`;\n    } else {\n      return typeof value;\n    }\n  }\n\n  if (typeof obj !== \"object\" || obj === null) {\n    return getType(obj);\n  }\n\n  let result = \"{\";\n  const keys = Object.keys(obj);\n  keys.forEach((key, index) => {\n    result += `${key}: ${getType(obj[key])}`;\n    if (index < keys.length - 1) {\n      result += \", \";\n    }\n  });\n  result += \"}\";\n  return result;\n}\n\nconst grabLog = [];\nconst grabServer = {};\nconst grabDefaults = {};\n\n// Add globals to window in browser, or global in Node.js\nif (typeof window !== \"undefined\") {\n  window.grab = grab;\n  window.log = log;\n  window.grabLog = grabLog;\n  window.grab.server = grabServer;\n  window.grab.defaults = grabDefaults;\n} else if (typeof global !== \"undefined\") {\n  global.grabLog = grabLog;\n  global.grab.server = grab.server;\n  global.grab.defaults = grab.defaults;\n  global.grab = grab;\n  global.log = log;\n}\n\nexport default grab;\n"],"names":[],"mappings":"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"}