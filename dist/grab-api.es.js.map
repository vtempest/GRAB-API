{"version":3,"file":"grab-api.es.js","sources":["../src/log.js","../src/grab-api.js"],"sourcesContent":["\n/**\n * Logs messages to the console with custom styling,\n * showing debug output in development and standard logs in production.\n * Pretty print JSON with description of structure layout.\n * @param {string|object} message - The message to log. If an object is provided, it will be stringified.\n * @param {boolean} [hideInProduction] -  default = auto-detects based on hostname.\n *  If true, uses `console.debug` (hidden in production). If false, uses `console.log`.\n * @param {string} [style] default='color: blue; font-size: 15px' - CSS style string for the console output.\n */\nexport function log(\n  message,\n  hideInProduction = undefined,\n  style = \"color: blue; font-size: 14px;\"\n) {\n  if (typeof hideInProduction === \"undefined\")\n    hideInProduction = window?.location.hostname.includes(\"localhost\");\n  // pretty print JSON with description of structure layout\n  if (typeof message === \"object\")\n    message =\n      printStructureJSON(message) + \"\\n\\n\" + JSON.stringify(message, null, 2);\n\n  if (hideInProduction) console.debug((style ? \"%c\" : \"\") + message, style);\n  else console.log((style ? \"%c\" : \"\") + message, style);\n}\n\n\n\n\n\n// ANSI color codes (for Node.js)\nconst colors = {\n  reset: \"\\x1b[0m\",\n  yellow: \"\\x1b[33m\",    // string\n  cyan: \"\\x1b[36m\",      // number\n  magenta: \"\\x1b[35m\",   // boolean\n  gray: \"\\x1b[90m\",      // null\n  green: \"\\x1b[32m\",     // object braces\n  blue: \"\\x1b[34m\",      // array brackets\n  red: \"\\x1b[31m\",       // function\n  white: \"\\x1b[37m\",     // default\n};\n\nfunction getColorForType(value) {\n  if (typeof value === \"string\") return colors.yellow;\n  if (typeof value === \"number\") return colors.cyan;\n  if (typeof value === \"boolean\") return colors.magenta;\n  if (typeof value === \"function\") return colors.red;\n  if (value === null) return colors.gray;\n  if (Array.isArray(value)) return colors.blue;\n  if (typeof value === \"object\") return colors.green;\n  return colors.white;\n}\n\nfunction getTypeString(value) {\n  if (typeof value === \"string\") return '\"\"';\n  if (typeof value === \"number\") return \"number\";\n  if (typeof value === \"boolean\") return \"bool\";\n  if (typeof value === \"function\") return \"function\";\n  if (value === null) return \"null\";\n  if (Array.isArray(value)) {\n    if (value.length)\n      return \"[\" + getTypeString(value[0]) + \"]\";\n    else\n      return \"[]\";\n  }\n  if (typeof value === \"object\") return \"{...}\";\n  return typeof value;\n}\n\nexport function printStructureJSON(obj, indent = 0) {\n  const pad = \"  \".repeat(indent);\n\n  // Handle primitives and null\n  if (typeof obj !== \"object\" || obj === null) {\n    const color = getColorForType(obj);\n    return color + getTypeString(obj) + colors.reset;\n  }\n\n  // Handle arrays\n  if (Array.isArray(obj)) {\n    let result = colors.blue + \"[\" + colors.reset;\n    if (obj.length) result += \"\\n\";\n    obj.forEach((item, idx) => {\n      result += pad + \"  \" + printStructureJSON(item, indent + 1);\n      if (idx < obj.length - 1) result += \",\";\n      result += \"\\n\";\n    });\n    result += pad + colors.blue + \"]\" + colors.reset;\n    return result;\n  }\n\n  // Handle objects\n  let result = colors.green + \"{\" + colors.reset;\n  const keys = Object.keys(obj);\n  if (keys.length) result += \"\\n\";\n  keys.forEach((key, index) => {\n    const value = obj[key];\n    const color = getColorForType(value);\n    result += pad + \"  \";\n    if (typeof value === \"object\" && value !== null && !Array.isArray(value)) {\n      // For nested objects, colorize key, then recurse for value\n      result += color + key + colors.reset + \": \" + printStructureJSON(value, indent + 1);\n    } else if (Array.isArray(value)) {\n      // For arrays, colorize key, then recurse for value\n      result += color + key + colors.reset + \": \" + printStructureJSON(value, indent + 1);\n    } else {\n      // For primitives\n      result += color + key + \": \" + getTypeString(value) + colors.reset;\n    }\n    if (index < keys.length - 1) result += \",\";\n    result += \"\\n\";\n  });\n  result += pad + colors.green + \"}\" + colors.reset;\n  if (indent === 0) {\n    console.log(result);\n  }\n  return result;\n}\n\n\n/**\n * Shows message in a modal overlay with concatenation \n * of messages, scroll large messages, and easy dismissal.\n * @param {string} msg - The message to display\n */\nexport function showAlert(msg) {\n  let o = document.getElementById('alert-overlay'), list;\n  if (!o) {\n    o = document.body.appendChild(document.createElement('div'));\n    o.id = 'alert-overlay';\n    o.style = \"position:fixed;inset:0;z-index:9999;background:rgba(0,0,0,0.5);display:flex;align-items:center;justify-content:center\";\n    o.innerHTML = `<div id=\"alert-box\" style=\"background:#fff;padding:1.5em 2em;border-radius:8px;box-shadow:0 2px 16px #0003;min-width:220px;max-width:90vw;max-height:80vh;position:relative;display:flex;flex-direction:column;\">\n      <button id=\"close-alert\" style=\"position:absolute;top:12px;right:20px;font-size:1.5em;background:none;border:none;cursor:pointer;color:black;\">&times;</button>\n      <div id=\"alert-list\" style=\"overflow:auto;flex:1;\"></div>\n    </div>`;\n    o.addEventListener('click', e => { if (e.target === o) o.remove(); });\n    o.querySelector('#close-alert').onclick = () => o.remove();\n    list = o.querySelector('#alert-list');\n  } else {\n    list = o.querySelector('#alert-list');\n  }\n  list.innerHTML += `<div style=\"color:#c00;margin:0.5em 0;\">${msg}</div>`;\n}","import { printStructureJSON, log, showAlert } from \"./log.js\";\n\n/**\n * ### GRAB: Generate Request to API from Browser\n * ![grabAPILogo](https://i.imgur.com/qrQWkeb.png)\n * \n * 1. **One Function**: 2Kb min, 0 dependencies, minimal boilerplate syntax - [better than top alternatives](https://grab.js.org/guide/Comparisons) \n * 2. **Auto-JSON Convert**: Pass parameters and get response or error in JSON, handling other data types as is.\n * 3. **isLoading Status**: Sets `.isLoading=true` on the pre-initialized response object so you can show a \"Loading...\" in any framework\n * 4. **Debug Logging**: Adds global `log()` and prints colored JSON structure, response, timing for requests in test.\n * 5. **Mock Server Support**: Configure `window.grab.mock` for development and testing environments\n * 6. **Concurrency Handling**: Prevent this request if one is ongoing to same path & params, or cancel the ongoing request.\n * 7. **Timeout & Retry**: Customizable request timeout, default 20s, and auto-retry on error\n * 8. **Rate Limiting**: Built-in rate limiting to prevent multi-click cascading responses, require to wait seconds between requests.\n * 9. **Request History**: Stores all request and response data in global `grab.log` object\n * 10. **Pagination Infinite Scroll**: Built-in pagination for infinite scroll to auto-load and merge next result page.\n * 11. **Base URL Based on Environment**: Configure `grab.default.baseURL` once at the top, overide with `SERVER_API_URL` in `.env` or `process.env.SERVER_API_URL` in Node.js.\n * 12. **Frontend Cache**: Set cache headers and retrieve from frontend memory for repeat requests to static data.\n * 13. **Modular Design**: Single, flexible function that can be called from any part of your application.\n * 14. **Framework Agnostic**: Alternatives like TanStack work only in component initialization and depend on React & others. \n * 15. **Globals**: Adds to window in browser or global in Node.js so you only import once: `grab()`, `log()`, `grab.log`, `grab.mock`, `grab.default`\n * 16. **TypeScript Tooltips**: Developers can hover over option names and autocomplete TypeScript. Add to top of file: `import 'grab-api.js/globals'`\n * \n * @param {string} path The full URL path OR relative path on this server after `grab.default.baseURL`\n * @param {object} [options={}] Request params for GET or body for POST/PUT/PATCH and utility options\n * @param {string} [options.method] default=\"GET\" The HTTP method to use\n * @param {object} [options.response] Pre-initialized object to set the response in. isLoading and error are also set on this object.\n * @param {boolean} [options.cancelOngoingIfNew]  default=true Cancel previous requests to same path\n * @param {boolean} [options.cancelNewIfOngoing] default=false Cancel if a request to path is in progress\n * @param {boolean} [options.cache] default=false Whether to cache the request and from frontend cache\n * @param {boolean} [options.debug] default=false Whether to log the request and response\n * @param {number} [options.timeout] default=20 The timeout for the request in seconds\n * @param {number} [options.rateLimit] default=0 If set, how many seconds to wait between requests\n * @param {string} [options.paginateResult]  The key to paginate result data by\n * @param {string} [options.paginateKey] default=\"\" The key to paginate the request by\n * @param {string} [options.baseURL] default='/api/' base url prefix, override with SERVER_API_URL env\n * @param {boolean} [options.setDefaults] default=false Pass this with options to set\n *  those options as defaults for all requests.\n * @param {number} [options.retryAttempts] default=0 Retry failed requests this many times\n * @param {number} [options.repeat] default=0 Repeat request this many times\n * @param {number} [options.repeatEvery] default=null Repeat request every seconds\n * @param {function} [options.logger] default=log Custom logger to override the built-in color JSON log()\n * @param {function} [options.onBeforeRequest] Set with defaults to modify each request data. Takes and returns in order: path, response, params, fetchParams\n * @param {function} [options.onAfterRequest] Set with defaults to modify each request data. Takes and returns in order: path, response, params, fetchParams\n * @param {any} [...params] All other params become GET params, POST body, and other methods.\n * @returns {Promise<Object>} The response object with resulting data or .error if error.\n * @author [vtempest (2025)](https://github.com/vtempest/grab-api)\n * @see  [🎯 Examples](https://grab.js.org/guide/Examples) [📑 Docs](https://grab.js.org)\n * @example import { grab } from \"grab-api.js\";\n  let res = {};\n  await grab('search', {\n    response: res,\n    query: \"search words\"\n  })\n */\nexport async function grab(path, options = {}) {\n  let {\n    headers,\n    response = {}, // Pre-initialized object to set the response in. isLoading and error are also set on this object.\n    method = options.post\n      ? \"POST\"\n      : options.put\n      ? \"PUT\"\n      : options.patch\n      ? \"PATCH\"\n      : options.delete\n      ? \"DELETE\"\n      : \"GET\", // set post: true for POST, omit for GET\n    cache = false, // Enable/disable frontend caching\n    timeout = 20, // Request timeout in seconds\n    baseURL = (typeof process !== \"undefined\" &&\n      process?.env?.SERVER_API_URL) ||\n      \"/api/\", // Use env var or default to /api/\n    cancelOngoingIfNew = true, // Cancel previous request for same path\n    cancelNewIfOngoing = false, // Don't make new request if one is ongoing\n    rateLimit = 0, // Minimum seconds between requests\n    debug = window?.location?.hostname?.includes(\"localhost\"), // Auto-enable debug on localhost\n    paginateResult = null, // Key to paginate in response\n    paginateKey = null, // Request param for pagination\n    setDefaults = false, // Set these options as defaults for future requests\n    retryAttempts = 0, // Retry failed requests once\n    logger = log, // Custom logger to override the built-in color JSON log()\n    onBeforeRequest = null, // Hook to modify request data before request is made\n    onAfterRequest = null, // Hook to modify request data after request is made\n    repeatEvery = null, // Repeat request every seconds\n    repeat = 0, // Repeat request this many times\n    debounce = null, // Debounce request this many milliseconds\n    errorAlert = true, // Show error alert in browser\n    ...params // All other params become request params/query\n  } = {\n    // Destructure options with defaults, merging with any globally set defaults\n    ...(window?.grab?.defaults || global?.grab?.defaults || {}),\n    ...options,\n  };\n\n  try {\n    // Handle repeat and repeatEvery\n    if (repeat > 1) {\n      for (let i = 0; i < repeat; i++) {\n        await grab(path, { ...options, repeat: 0 });\n      }\n      return response;\n    }\n    if (repeatEvery) {\n      setInterval(async () => {\n        await grab(path, { ...options, repeat: 0, repeatEvery: null });\n      }, repeatEvery * 1000);\n      return response;\n    }\n\n    // Store options as defaults if setDefaults flag is true\n    if (options?.setDefaults) {\n      if (typeof window !== \"undefined\")\n        window.grab.default = { ...options, setDefaults: undefined };\n      else global.grab.default = { ...options, setDefaults: undefined };\n      return {};\n    }\n\n    // response can be a function in React like setResults\n    let resFunction = typeof response === \"function\" ? response : null;\n    // Initialize response object if not provided\n    if (!response || resFunction) response = {};\n\n    // Find prior request in log same path and params, ignoring the \"page\" or similar page key\n    let paramsAsText = JSON.stringify(\n      paginateKey ? { ...params, [paginateKey]: undefined } : params\n    );\n    let priorRequest = grab.log?.find(\n      (e) => e.request == paramsAsText && e.path == path\n    );\n\n    // Handle response clearing/caching based on pagination\n    if (!paginateKey) {\n      // Return cached response if enabled and request is identical\n      if (cache && priorRequest) {\n        for (let key of Object.keys(priorRequest.res))\n          response[key] = priorRequest.res[key];\n        if (resFunction) response = resFunction(response);\n        return response;\n      }\n\n      // Clear previous response data\n      for (let key of Object.keys(response)) response[key] = undefined;\n    } else {\n      // Handle pagination - track current page and append results\n      let pageNumber =\n        priorRequest?.currentPage + 1 || params?.[paginateKey] || 1;\n\n      //clear response if not repeat request, new params\n      if (!priorRequest) {\n        response[paginateResult] = [];\n        pageNumber = 1;\n      }\n\n      //update current page on prior request\n      if (priorRequest) priorRequest.currentPage = pageNumber;\n      params[paginateKey] = pageNumber;\n    }\n\n    // Set loading state\n    response.isLoading = true;\n    if (resFunction) response = resFunction(response);\n\n    // Enforce rate limiting if enabled\n    if (\n      rateLimit > 0 &&\n      priorRequest?.lastFetchTime &&\n      priorRequest.lastFetchTime > Date.now() - 1000 * rateLimit\n    )\n      throw new Error(\n        \"Fetch rate limit exceeded for \" +\n          path +\n          \". Wait \" +\n          rateLimit +\n          \"s between requests.\"\n      );\n\n    // Handle request cancellation logic\n    if (priorRequest?.controller)\n      if (cancelOngoingIfNew) priorRequest.controller.abort();\n      else if (cancelNewIfOngoing) return { isLoading: true };\n\n    // Setup new request tracking\n    grab.log.unshift({\n      path,\n      request: paramsAsText,\n      lastFetchTime: Date.now(),\n      controller: new AbortController(),\n    });\n\n    // Configure fetch parameters\n    let fetchParams = {\n      method,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        ...headers,\n      },\n      redirect: \"follow\",\n      cache: cache ? \"force-cache\" : \"no-store\",\n      signal: cancelOngoingIfNew\n        ? grab.log[0]?.controller?.signal\n        : AbortSignal.timeout(timeout * 1000),\n    };\n\n    // Format request params/query params based on method\n    let paramsGETRequest = \"\";\n    if ([\"POST\", \"PUT\", \"PATCH\"].includes(method))\n      fetchParams.body = params.body || JSON.stringify(params);\n    else paramsGETRequest = \"?\" + new URLSearchParams(params).toString();\n\n    //hook all requests before request intercept to modify data\n    if (typeof beforeRequest === \"function\")\n      [path, response, params, fetchParams] = onBeforeRequest(\n        path,\n        response,\n        params,\n        fetchParams\n      );\n\n    // Handle path and baseURL, if path is absolute, ignore baseURL\n    if (!path.startsWith(\"/\") && !baseURL.endsWith(\"/\")) path = \"/\" + path;\n    if (path.startsWith(\"http:\") || path.startsWith(\"https:\")) baseURL = \"\";\n\n    // Handle mock server responses if configured\n    let res = null,\n      startTime = new Date(),\n      mockHandler = grab.mock?.[path];\n\n    let wait = (s) => new Promise((res) => setTimeout(res, s * 1000 || 0));\n\n    if (\n      mockHandler &&\n      (!mockHandler.params || mockHandler.method == method) &&\n      (!mockHandler.params ||\n        paramsAsText == JSON.stringify(mockHandler.params))\n    ) {\n      await wait(mockHandler.delay);\n\n      res =\n        typeof mockHandler.response === \"function\"\n          ? mockHandler.response(params)\n          : mockHandler.response;\n    } else {\n      // Make actual API request\n      res = await fetch(baseURL + path + paramsGETRequest, fetchParams).catch(\n        (e) => {\n          throw new Error(e);\n        }\n      );\n\n      //get response type\n      let type = res.headers.get(\"content-type\");\n      res = await (type\n        ? type.includes(\"application/json\")\n          ? res.json()\n          : type.includes(\"application/pdf\") ||\n            type.includes(\"application/octet-stream\")\n          ? res.blob()\n          : res.text()\n        : res.json()\n      ).catch((e) => {\n        throw new Error(\"Error parsing response: \" + e);\n      });\n\n      if (res?.startsWith && res?.startsWith(\"{\")) res = JSON.parse(res);\n    }\n\n    //hook all requests before request intercept to modify data\n    if (typeof afterRequest === \"function\")\n      [path, response, params, fetchParams] = onAfterRequest(\n        path,\n        response,\n        params,\n        fetchParams\n      );\n\n    // Clear loading state\n    delete response.isLoading;\n\n    delete priorRequest?.controller;\n\n    // Log debug information if enabled\n\n    const elapsedTime = (\n      (Number(new Date()) - Number(startTime)) /\n      1000\n    ).toFixed(1);\n    if (debug) {\n      log(\n        \"Path:\" +\n          baseURL +\n          path +\n          paramsGETRequest +\n          \"\\n\" +\n          JSON.stringify(options, null, 2) +\n          \"\\nTime: \" +\n          elapsedTime +\n          \"s\\nResponse: \" +\n          printStructureJSON(res)\n      );\n      // allows user to expand and collapse the object in console\n      console.log(res);\n    }\n\n    //if not object, return\n    if (typeof res === \"undefined\") return;\n\n    // Update response object with results, handling pagination\n    for (let key of Object.keys(res))\n      response[key] =\n        paginateResult == key && response[key]?.length\n          ? [...response[key], ...res[key]] // concat with existing results\n          : res[key]; // set new results\n\n    // Store request/response data for future reference\n    grab.log.unshift({\n      path,\n      request: JSON.stringify({ ...params, paginateKey: undefined }),\n      response,\n      lastFetchTime: Date.now(),\n    });\n\n    if (resFunction) response = resFunction(response);\n\n    return response;\n  } catch (error) {\n    let errorMessage =\n      \"Error: \" +\n      error.message +\n      \"\\nPath:\" +\n      baseURL +\n      path +\n      JSON.stringify(params);\n\n    showAlert(errorMessage);\n\n    log(errorMessage, true, \"color: red;\");\n\n    // Handle errors, with optional retry\n    if (options.retryAttempts > 0)\n      return await grab(path, response, {\n        ...options,\n        retryAttempts: --options.retryAttempts,\n      });\n    // update error in response\n    if (!error.message.includes(\"signal\")) response.error = error.message;\n    delete response.isLoading;\n    // update error in log\n    grab.log?.unshift({\n      path,\n      request: JSON.stringify(params),\n      error: error.message,\n    });\n    if (resFunction) response = resFunction(response);\n    return response;\n  }\n}\n\n/**\n * Creates a new instance of grab with default options\n * to apply to all requests made by this instance\n * @param {Object} defaultOptions - options for all requests by instance\n * @returns {Function} grab() function using those options\n * @example\n * const grabGoogleAPI = grab.instance({\n *   headers: {'Authorization': 'Bearer token'},\n *   baseURL: 'https://api.google.com/v1/',\n *   debug: true\n * });\n * const data = await grabGoogleAPI('/api/endpoint')\n */\ngrab.instance =\n  (defaultOptions = {}) =>\n  (path, options = {}) =>\n    grab(path, { ...defaultOptions, ...options });\n\n// Add globals to window in browser, or global in Node.js\nif (typeof window !== \"undefined\") {\n  window.grab = grab;\n  window.log = log;\n  window.grab.log = [];\n  window.grab.mock = {};\n  window.grab.default = {};\n} else if (typeof global !== \"undefined\") {\n  global.grab = grab;\n  global.log = log;\n  global.grab.log = [];\n  global.grab.mock = {};\n  global.grab.default = {};\n}\n\nexport default grab;\n\n/**\n * Todo:\n *  - pagination working\n *  - react tests\n *  - progress\n *  - grab error popup and dev tool\n *  - tests in stackblitz\n *  - loading icons\n *  - repeat every\n *  - debounce\n */\n"],"names":["result","resFunction","res"],"mappings":"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"}