{"version":3,"file":"grab-api.es.js","sources":["../src/log.js","../src/grab-api.js"],"sourcesContent":["\n/**\n * ### Colorized Log With JSON Structure\n * ![Debug log](https://i.imgur.com/R8Qp6Vg.png)  \n * Logs messages to the console with custom styling,\n * prints JSON with description of structure layout, \n * and showing debug output in development only.\n * @param {string|object} message - The message to log. If an object is provided, it will be stringified.\n * @param {boolean} [hideInProduction] -  default = auto-detects based on hostname.\n *  If true, uses `console.debug` (hidden in production). If false, uses `console.log`.\n * @param {string} [style] default='color: blue; font-size: 15px' - CSS style string \n */\nexport function log(\n  message,\n  hideInProduction = undefined,\n  style = \"color: blue; font-size: 12pt;\"\n) {\n  // Auto-detect if we should hide logs in production based on hostname\n  if (typeof hideInProduction === \"undefined\")\n    hideInProduction = typeof window !== \"undefined\" && window?.location.hostname.includes(\"localhost\");\n\n  // For objects, print both the structure visualization and full JSON\n  if (typeof message === \"object\")\n    message =\n      printStructureJSON(message) + \"\\n\\n\" + JSON.stringify(message, null, 2);\n\n  // Use console.debug for production-hidden logs, console.log otherwise\n  if (hideInProduction) console.debug((style ? \"%c\" : \"\") + message, style);\n  else console.log((style ? \"%c\" : \"\") + message, style);\n}\n\n\n// ANSI escape codes for terminal colors when running in Node.js\n// Each color is mapped to a specific data type for consistent visualization\nconst colors = {\n  reset: \"\\x1b[0m\",      // Reset to default color\n  yellow: \"\\x1b[33m\",    // Used for strings\n  cyan: \"\\x1b[36m\",      // Used for numbers\n  magenta: \"\\x1b[35m\",   // Used for booleans\n  gray: \"\\x1b[90m\",      // Used for null values\n  green: \"\\x1b[32m\",     // Used for object braces\n  blue: \"\\x1b[34m\",      // Used for array brackets\n  red: \"\\x1b[31m\",       // Used for functions\n  white: \"\\x1b[37m\",     // Default color\n};\n\n/**\n * Determines the appropriate color code for a given value type\n * Used for consistent color coding in the structure visualization\n */\nfunction getColorForType(value) {\n  if (typeof value === \"string\") return colors.yellow;\n  if (typeof value === \"number\") return colors.cyan;\n  if (typeof value === \"boolean\") return colors.magenta;\n  if (typeof value === \"function\") return colors.red;\n  if (value === null) return colors.gray;\n  if (Array.isArray(value)) return colors.blue;\n  if (typeof value === \"object\") return colors.green;\n  return colors.white;\n}\n\n/**\n * Returns a string representation of the value's type\n * Used to show simplified type information in the structure visualization\n */\nfunction getTypeString(value) {\n  if (typeof value === \"string\") return '\"\"';\n  if (typeof value === \"number\") return \"number\";\n  if (typeof value === \"boolean\") return \"bool\";\n  if (typeof value === \"function\") return \"function\";\n  if (value === null) return \"null\";\n  if (Array.isArray(value)) {\n    if (value.length)\n      return \"[\" + getTypeString(value[0]) + \"]\";\n    else\n      return \"[]\";\n  }\n  if (typeof value === \"object\") return \"{...}\";\n  return typeof value;\n}\n\n/**\n * Creates a colored visualization of a JSON object's structure\n * Shows the shape and types of the data rather than actual values\n * Recursively processes nested objects and arrays\n */\nexport function printStructureJSON(obj, indent = 0) {\n  const pad = \"  \".repeat(indent);\n\n  // Handle primitive values and null\n  if (typeof obj !== \"object\" || obj === null) {\n    const color = getColorForType(obj);\n    return color + getTypeString(obj) + colors.reset;\n  }\n\n  // Handle arrays with special bracket formatting\n  if (Array.isArray(obj)) {\n    let result = colors.blue + \"[\" + colors.reset;\n    if (obj.length) result += \"\\n\";\n    obj.forEach((item, idx) => {\n      result += pad + \"  \" + printStructureJSON(item, indent + 1);\n      if (idx < obj.length - 1) result += \",\";\n      result += \"\\n\";\n    });\n    result += pad + colors.blue + \"]\" + colors.reset;\n    return result;\n  }\n\n  // Handle objects with special brace and property formatting\n  let result = colors.green + \"{\" + colors.reset;\n  const keys = Object.keys(obj);\n  if (keys.length) result += \"\\n\";\n  keys.forEach((key, index) => {\n    const value = obj[key];\n    const color = getColorForType(value);\n    result += pad + \"  \";\n    \n    // Handle nested objects recursively\n    if (typeof value === \"object\" && value !== null && !Array.isArray(value)) {\n      result += color + key + colors.reset + \": \" + printStructureJSON(value, indent + 1);\n    } \n    // Handle nested arrays recursively\n    else if (Array.isArray(value)) {\n      result += color + key + colors.reset + \": \" + printStructureJSON(value, indent + 1);\n    } \n    // Handle primitive values\n    else {\n      result += color + key + \": \" + getTypeString(value) + colors.reset;\n    }\n    if (index < keys.length - 1) result += \",\";\n    result += \"\\n\";\n  });\n  result += pad + colors.green + \"}\" + colors.reset;\n  \n  // Only log at top level of recursion\n  if (indent === 0) {\n    // console.log(result);\n  }\n  return result;\n}\n\n\n/**\n * Shows message in a modal overlay with scrollable message stack\n * and is easier to dismiss unlike alert() which blocks window.\n * Creates a semi-transparent overlay with a white box containing the message.\n * @param {string} msg - The message to display\n */\nexport function showAlert(msg) {\n  let o = document.getElementById('alert-overlay'), list;\n  \n  // Create overlay and alert box if they don't exist\n  if (!o) {\n    o = document.body.appendChild(document.createElement('div'));\n    o.id = 'alert-overlay';\n    o.style = \"position:fixed;inset:0;z-index:9999;background:rgba(0,0,0,0.5);display:flex;align-items:center;justify-content:center\";\n    o.innerHTML = `<div id=\"alert-box\" style=\"background:#fff;padding:1.5em 2em;border-radius:8px;box-shadow:0 2px 16px #0003;min-width:220px;max-height:80vh;position:relative;display:flex;flex-direction:column;\">\n      <button id=\"close-alert\" style=\"position:absolute;top:12px;right:20px;font-size:1.5em;background:none;border:none;cursor:pointer;color:black;\">&times;</button>\n      <div id=\"alert-list\" style=\"overflow:auto;flex:1;\"></div>\n    </div>`;\n    \n    // Add click handlers to close overlay\n    o.addEventListener('click', () => o.remove());\n    o.querySelector('#close-alert').onclick = () => o.remove();\n    list = o.querySelector('#alert-list');\n  } else {\n    list = o.querySelector('#alert-list');\n  }\n  \n  // Add new message to list\n  list.innerHTML += `<div style=\"border-bottom:1px solid #333; font-size:1.2em;margin:0.5em 0;\">${msg}</div>`;\n}\n\n\nexport function setupDevTools() {\n  //keyboard shortcut to toggle debug\ndocument.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"i\" && e.ctrlKey) {\n    //creeate html of the grab.log requests\n    let html = \" \";\n    for (let request of grab.log) {\n      html += `<div style=\"margin-bottom:1em; border-bottom:1px solid #ccc; padding-bottom:1em;\">\n        <b>Path:</b> ${request.path}<br>\n        <b>Request:</b> ${request.request}<br>\n        <b>Response:</b> ${JSON.stringify(request.response, null, 2)}<br>\n        <b>Time:</b> ${new Date(request.lastFetchTime).toLocaleString()}\n      </div>`;\n    }\n    showAlert(html);\n  }\n});\n}","import { printStructureJSON, log, showAlert, setupDevTools } from \"./log.js\";\n\n/**\n * ### GRAB: Generate Request to API from Browser\n * ![GrabAPILogo](https://i.imgur.com/qrQWkeb.png)\n * **GRAB is the FBEST Request Manager: Functionally Brilliant, Elegantly Simple Tool**\n * 1. **One Function**: 3Kb min, 0 dependencies, minimalist syntax, [more features than top alternatives](https://grab.js.org/guide/Comparisons)\n * 2. **Auto-JSON Convert**: Pass parameters and get response or error in JSON, handling other data types as is.\n * 3. **isLoading Status**: Sets `.isLoading=true` on the pre-initialized response object so you can show a \"Loading...\" in any framework\n * 4. **Debug Logging**: Adds global `log()` and prints colored JSON structure, response, timing for requests in test.\n * 5. **Mock Server Support**: Configure `window.grab.mock` for development and testing environments\n * 6. **Cancel Duplicates**: Prevent this request if one is ongoing to same path & params, or cancel the ongoing request.\n * 7. **Timeout & Retry**: Customizable request timeout, default 20s, and auto-retry on error\n * 8. **DevTools**: `Ctrl+I` overlays webpage with devtools showing all requests and responses, timing, and JSON structure.\n * 9. **Request History**: Stores all request and response data in global `grab.log` object\n * 10. **Pagination Infinite Scroll**: Built-in pagination for infinite scroll to auto-load and merge next result page, with scroll position recovery.\n * 11. **Base URL Based on Environment**: Configure `grab.defaults.baseURL` once at the top, overide with `SERVER_API_URL` in `.env`.\n * 12. **Frontend Cache**: Set cache headers and retrieve from frontend memory for repeat requests to static data.\n * 13. **Regrab On Error**: Regrab on timeout error, or on window refocus, or on network change, or on stale data.\n * 14. **Framework Agnostic**: Alternatives like TanStack work only in component initialization and depend on React & others.\n * 15. **Globals**: Adds to window in browser or global in Node.js so you only import once: `grab()`, `log()`, `grab.log`, `grab.mock`, `grab.defaults`\n * 16. **TypeScript Tooltips**: Developers can hover over option names and autocomplete TypeScript.\n * 17. **Request Stategies**: [ðŸŽ¯ Examples](https://grab.js.org/guide/Examples) show common stategies like debounce, repeat, proxy, unit tests, interceptors, file upload, etc\n * 18. **Rate Limiting**: Built-in rate limiting to prevent multi-click cascading responses, require to wait seconds between requests.\n * 19. **Repeat**: Repeat request this many times, or repeat every X seconds to poll for updates.\n * 20. **Loading Icons**: Import from `grab-api.js/icons` to get enhanced animated loading icons.\n *\n * @param {string} path The full URL path OR relative path on this server after `grab.defaults.baseURL`\n * @param {object} [options={}] Request params for GET or body for POST/PUT/PATCH and utility options\n * @param {string} [options.method] default=\"GET\" The HTTP method to use\n * @param {object} [options.response] Pre-initialized object which becomes response JSON, no need for `.data`.\n *  isLoading and error may also be set on this object. May omit and use return if load status is not needed.\n * @param {boolean} [options.cancelOngoingIfNew]  default=true Cancel previous requests to same path\n * @param {boolean} [options.cancelNewIfOngoing] default=false Cancel if a request to path is in progress\n * @param {boolean} [options.cache] default=false Whether to cache the request and from frontend cache\n * @param {boolean} [options.debug] default=false Whether to log the request and response\n * @param {number} [options.timeout] default=20 The timeout for the request in seconds\n * @param {number} [options.staleTime] default=60 Seconds to consider data stale and invalidate cache\n * @param {number} [options.rateLimit] default=0 If set, how many seconds to wait between requests\n * @param {string} [options.baseURL] default='/api/' base url prefix, override with SERVER_API_URL env\n * @param {boolean} [options.setDefaults] default=false Pass this with options to set\n *  those options as defaults for all requests.\n * @param {number} [options.retryAttempts] default=0 Retry failed requests this many times\n * @param {array} [options.infiniteScroll] default=null [page key, response field to concatenate, element with results]\n * @param {number} [options.repeat] default=0 Repeat request this many times\n * @param {number} [options.repeatEvery] default=null Repeat request every seconds\n * @param {function} [options.logger] default=log Custom logger to override the built-in color JSON log()\n * @param {function} [options.onBeforeRequest] Set with defaults to modify each request data.\n *  Takes and returns in order: path, response, params, fetchParams\n * @param {function} [options.onAfterRequest] Set with defaults to modify each request data.\n *  Takes and returns in order: path, response, params, fetchParams\n * @param {number} [options.debounce] default=0 Seconds to debounce request, wait to execute so that other requests may override\n * @param {boolean} [options.regrabOnStale] default=false Refetch when cache is past staleTime\n * @param {boolean} [options.regrabOnFocus] default=false Refetch on window refocus\n * @param {boolean} [options.regrabOnNetwork] default=false Refetch on network change\n * @param {any} [...params] All other params become GET params, POST body, and other methods.\n * @returns {Promise<Object>} The response object with resulting data or .error if error.\n * @author [vtempest (2025)](https://github.com/vtempest/grab-api)\n * @see  [ðŸŽ¯ Examples](https://grab.js.org/guide/Examples) [ðŸ“‘ Docs](https://grab.js.org)\n * @example import grab from 'grab-api.js';\n * let res = {};\n * await grab('search', {\n *   response: res,\n *   query: \"search words\"\n * })\n */\nexport async function grab(path, options = {}) {\n  let {\n    headers,\n    response = {}, // Pre-initialized object to set the response in. isLoading and error are also set on this object.\n    method = options.post // set post: true for POST, omit for GET\n      ? \"POST\"\n      : options.put\n      ? \"PUT\"\n      : options.patch\n      ? \"PATCH\"\n      : options.delete\n      ? \"DELETE\"\n      : \"GET\",\n    cache = false, // Enable/disable frontend caching\n    staleTime = 60, // Seconds to consider data stale and invalidate cache\n    timeout = 20, // Request timeout in seconds\n    baseURL = (typeof process !== \"undefined\" && process.env.SERVER_API_URL) ||\n      \"/api/\", // Use env var or default to /api/\n    cancelOngoingIfNew = true, // Cancel previous request for same path\n    cancelNewIfOngoing = false, // Don't make new request if one is ongoing\n    rateLimit = 0, // Minimum seconds between requests\n    debug = typeof window !== \"undefined\" &&\n      window?.location?.hostname?.includes(\"localhost\"), // Auto-enable debug on localhost\n    infiniteScroll = null, // page key, response field to concatenate, element with results\n    setDefaults = false, // Set these options as defaults for future requests\n    retryAttempts = 0, // Retry failed requests once\n    logger = log, // Custom logger to override the built-in color JSON log()\n    onBeforeRequest = null, // Hook to modify request data before request is made\n    onAfterRequest = null, // Hook to modify request data after request is made\n    repeatEvery = null, // Repeat request every seconds\n    repeat = 0, // Repeat request this many times\n    debounce = 0, // Seconds to debounce request, wait to execute so that other requests may override\n    regrabOnStale = false, // Refetch when cache is past staleTime\n    regrabOnFocus = false, // Refetch on window refocus\n    regrabOnNetwork = false, // Refetch on network change\n    ...params // All other params become request params/query\n  } = {\n    // Destructure options with defaults, merging with any globally set defaults\n    ...(typeof window !== \"undefined\" ? window?.grab?.defaults : global?.grab?.defaults || {}),\n    ...options,\n  };\n  try {\n\n    \n    //handle debounce\n    if (debounce > 0) {\n      return await debouncer(async () => {\n        await grab(path, { ...options, debounce: 0 });\n      }, debounce * 1000);\n    }\n\n    // Handle repeat options:\n    // - repeat: Makes the same request multiple times sequentially\n    // - repeatEvery: Makes the request periodically on an interval\n    if (repeat > 1) {\n      for (let i = 0; i < repeat; i++) {\n        await grab(path, { ...options, repeat: 0 });\n      }\n      return response;\n    }\n    if (repeatEvery) {\n      setInterval(async () => {\n        await grab(path, { ...options, repeat: 0, repeatEvery: null });\n      }, repeatEvery * 1000);\n      return response;\n    }\n\n    // Store the provided options as new defaults if setDefaults flag is set\n    // This allows configuring default options that apply to all future requests\n    if (options?.setDefaults) {\n      if (typeof window !== \"undefined\")\n        window.grab.defaults = { ...options, setDefaults: undefined };\n      else global.grab.defaults = { ...options, setDefaults: undefined };\n\n      return {};\n    }\n\n    // regrab on stale, on window refocus, on network\n    if (regrabOnStale && cache)\n      setTimeout(async () => {\n        await grab(path, { ...options, cache: false });\n      }, 1000 * staleTime);\n\n    if (regrabOnFocus) {\n      window.addEventListener(\"focus\", async () => {\n        await grab(path, { ...options, cache: false });\n      });\n      document.addEventListener(\"visibilitychange\", async () => {\n        if (document.visibilityState === \"visible\") {\n          await grab(path, { ...options, cache: false });\n        }\n      });\n    }\n    if (regrabOnNetwork)\n      window.addEventListener(\"online\", async () => {\n        if (document.visibilityState === \"visible\") {\n          await grab(path, { ...options, cache: false });\n        }\n      });\n\n    // Handle response parameter which can be either an object to populate\n    // or a function to call with results (e.g. React setState)\n    let resFunction = typeof response === \"function\" ? response : null;\n    if (!response || resFunction) response = {};\n\n    var [paginateKey, paginateResult, paginateElement] = infiniteScroll || [];\n\n    // Configure infinite scroll behavior if enabled\n    // Attaches scroll listener to specified element that triggers next page load\n    if (infiniteScroll?.length && typeof window == \"undefined\") {\n      let paginateDOM =\n        typeof paginateElement === \"string\"\n          ? document.querySelector(paginateElement)\n          : paginateElement;\n\n      if (paginateDOM)\n        paginateDOM.removeEventListener(\"scroll\", window?.scrollListener);\n\n      // Your modified scroll listener with position saving\n      window.scrollListener = paginateDOM.addEventListener(\n        \"scroll\",\n        async ({ target: t }) => {\n          // Save scroll position whenever user scrolls\n          localStorage.setItem(\n            \"scroll\",\n            JSON.stringify([t.scrollTop, t.scrollLeft, paginateElement])\n          );\n\n          if (t.scrollHeight - t.scrollTop <= t.clientHeight + 200) {\n            await grab(path, {\n              ...options,\n              cache: false,\n              [paginateKey]: priorRequest?.currentPage + 1,\n            });\n          }\n        }\n      );\n    }\n\n    // Check request history for a previous request with same path/params\n    // Used for caching and pagination. Ignores pagination params when comparing.\n    let paramsAsText = JSON.stringify(\n      paginateKey ? { ...params, [paginateKey]: undefined } : params\n    );\n    let priorRequest = grab.log?.find(\n      (e) => e.request == paramsAsText && e.path == path\n    );\n\n    // Handle response data management based on pagination settings\n    if (!paginateKey) {\n      // For non-paginated requests:\n      // Return cached response if caching enabled and identical request exists\n      if (\n        cache &&\n        priorRequest &&\n        priorRequest.lastFetchTime > Date.now() - 1000 * staleTime\n      ) {\n        for (let key of Object.keys(priorRequest.res))\n          response[key] = priorRequest.res[key];\n        if (resFunction) response = resFunction(response);\n        return response;\n      }\n\n      // Clear any existing response data\n      for (let key of Object.keys(response)) response[key] = undefined;\n    } else {\n      // For paginated requests:\n      // Track current page number and append results to existing data\n      let pageNumber =\n        priorRequest?.currentPage + 1 || params?.[paginateKey] || 1;\n\n      // Clear response if this is a new request with new params\n      if (!priorRequest) {\n        response[paginateResult] = [];\n        pageNumber = 1;\n      }\n\n      // Update page tracking\n      if (priorRequest) priorRequest.currentPage = pageNumber;\n      params[paginateKey] = pageNumber;\n    }\n\n    // Set loading state on response object\n    if (typeof response === \"function\")\n      response = response({ isLoading: true });\n    else if (typeof response === \"object\") response.isLoading = true;\n\n    if (resFunction) response = resFunction(response);\n\n    // Enforce rate limiting between requests if configured\n    if (\n      rateLimit > 0 &&\n      priorRequest?.lastFetchTime &&\n      priorRequest.lastFetchTime > Date.now() - 1000 * rateLimit\n    )\n      throw new Error(\n        \"Fetch rate limit exceeded for \" +\n          path +\n          \". Wait \" +\n          rateLimit +\n          \"s between requests.\"\n      );\n\n    // Handle request cancellation based on configuration:\n    // - cancelOngoingIfNew: Cancels any in-progress request for same path\n    // - cancelNewIfOngoing: Prevents new request if one is already in progress\n    if (priorRequest?.controller)\n      if (cancelOngoingIfNew) priorRequest.controller.abort();\n      else if (cancelNewIfOngoing) return { isLoading: true };\n\n    // Track new request in history log\n    grab.log.unshift({\n      path,\n      request: paramsAsText,\n      lastFetchTime: Date.now(),\n      controller: new AbortController(),\n    });\n\n    // Configure fetch request parameters including headers, cache settings,\n    // and timeout/cancellation signals\n    let fetchParams = {\n      method,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        ...headers,\n      },\n      redirect: \"follow\",\n      cache: cache ? \"force-cache\" : \"no-store\",\n      signal: cancelOngoingIfNew\n        ? grab.log[0]?.controller?.signal\n        : AbortSignal.timeout(timeout * 1000),\n    };\n\n    // Format request parameters based on HTTP method\n    // POST/PUT/PATCH send data in request body\n    // GET/DELETE append data as URL query parameters\n    let paramsGETRequest = \"\";\n    if ([\"POST\", \"PUT\", \"PATCH\"].includes(method))\n      fetchParams.body = params.body || JSON.stringify(params);\n    else paramsGETRequest = \"?\" + new URLSearchParams(params).toString();\n\n    // Execute pre-request hook if configured\n    // Allows modifying request data before sending\n    if (typeof beforeRequest === \"function\")\n      [path, response, params, fetchParams] = onBeforeRequest(\n        path,\n        response,\n        params,\n        fetchParams\n      );\n\n    // Handle URL construction\n    // Ensures proper joining of baseURL and path\n    if (!path.startsWith(\"/\") && !baseURL.endsWith(\"/\")) path = \"/\" + path;\n    if (path.startsWith(\"http:\") || path.startsWith(\"https:\")) baseURL = \"\";\n\n    // Process request through mock handler if configured\n    // Otherwise make actual API request\n    let res = null,\n      startTime = new Date(),\n      mockHandler = grab.mock?.[path];\n\n    let wait = (s) => new Promise((res) => setTimeout(res, s * 1000 || 0));\n\n    if (\n      mockHandler &&\n      (!mockHandler.params || mockHandler.method == method) &&\n      (!mockHandler.params ||\n        paramsAsText == JSON.stringify(mockHandler.params))\n    ) {\n      await wait(mockHandler.delay);\n\n      res =\n        typeof mockHandler.response === \"function\"\n          ? mockHandler.response(params)\n          : mockHandler.response;\n    } else {\n      // Make actual API request and handle response based on content type\n      res = await fetch(baseURL + path + paramsGETRequest, fetchParams).catch(\n        (e) => {\n          throw new Error(e);\n        }\n      );\n\n      let type = res.headers.get(\"content-type\");\n      res = await (type\n        ? type.includes(\"application/json\")\n          ? res && res.json()\n          : type.includes(\"application/pdf\") ||\n            type.includes(\"application/octet-stream\")\n          ? res.blob()\n          : res.text()\n        : res.json()\n      ).catch((e) => {\n        throw new Error(\"Error parsing response: \" + e);\n      });\n    }\n\n    // Execute post-request hook if configured\n    // Allows modifying response data before processing\n    if (typeof afterRequest === \"function\")\n      [path, response, params, fetchParams] = onAfterRequest(\n        path,\n        response,\n        params,\n        fetchParams\n      );\n\n    // Clear request tracking states\n    if (typeof response === \"function\")\n      response = response({ isLoading: undefined });\n    else if (typeof response === \"object\") delete response?.isLoading;\n\n    delete priorRequest?.controller;\n\n    // Log debug information if enabled\n    // Includes request details, timing, and response structure\n    const elapsedTime = (\n      (Number(new Date()) - Number(startTime)) /\n      1000\n    ).toFixed(1);\n    if (debug) {\n      log(\n        \"Path:\" +\n          baseURL +\n          path +\n          paramsGETRequest +\n          \"\\n\" +\n          JSON.stringify(options, null, 2) +\n          \"\\nTime: \" +\n          elapsedTime +\n          \"s\\nResponse: \" +\n          printStructureJSON(res)\n      );\n      console.log(res);\n    }\n\n    if (typeof res === \"undefined\") return;\n\n    // Update response object with results\n    // For paginated requests, concatenates with existing results\n    if (typeof res === \"object\")\n      for (let key of Object.keys(res))\n        response[key] =\n          paginateResult == key && response[key]?.length\n            ? [...response[key], ...res[key]]\n            : res[key];\n    else response.data = res;\n\n    // Store request/response in history log\n    grab.log.unshift({\n      path,\n      request: JSON.stringify({ ...params, paginateKey: undefined }),\n      response,\n      lastFetchTime: Date.now(),\n    });\n\n    if (resFunction) response = resFunction(response);\n\n    return response;\n  } catch (error) {\n    // Handle any errors that occurred during request processing\n    let errorMessage =\n      \"Error: \" + error.message + \"\\nPath:\" + baseURL + path + \"\\n\";\n    JSON.stringify(params);\n\n    // Retry request if retries are configured and attempts remain\n    if (options.retryAttempts > 0)\n      return await grab(path, response, {\n        ...options,\n        retryAttempts: --options.retryAttempts,\n      });\n\n    // Update error state in response object\n    // Do not show errors for duplicate aborted requests\n    if (!error.message.includes(\"signal\")) {\n      log(errorMessage, true, \"color: red;\");\n      if (debug) showAlert(errorMessage);\n      response.error = error.message;\n    }\n    if (typeof response === \"function\")\n      response = response({ isLoading: undefined, error: error.message });\n    else delete response?.isLoading;\n\n    // Log error in request history\n    grab.log?.unshift({\n      path,\n      request: JSON.stringify(params),\n      error: error.message,\n    });\n\n    if (typeof options.response === \"function\")\n      response = options.response(response);\n    return response;\n  }\n}\n\n\n/**\n * Creates a new instance of grab with default options\n * to apply to all requests made by this instance\n * @param {Object} defaultOptions - options for all requests by instance\n * @returns {Function} grab() function using those options\n */\ngrab.instance =\n  (defaultOptions = {}) =>\n  (path, options = {}) =>\n    grab(path, { ...defaultOptions, ...options });\n\n\nconst debouncer = async (func, wait) => {\n  let timeout;\n  return async function executedFunction(...args) {\n    const later = async () => {\n      clearTimeout(timeout);\n      await func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n};\n\n// Add globals to window in browser, or global in Node.js\nif (typeof window !== \"undefined\") {\n  window.grab = grab;\n  window.log = log;\n  window.grab.log = [];\n  window.grab.mock = {};\n  window.grab.defaults = {};\n\n  //Ctrl+I setup dev tools\n  setupDevTools();\n\n  // Restore scroll position when page loads or component mounts\n  document.addEventListener(\"DOMContentLoaded\", () => {\n    let [scrollTop, scrollLeft, paginateElement] =\n      JSON.parse(localStorage.getItem(\"scroll\")) || [];\n    if (!scrollTop) return;\n    document.querySelector(paginateElement).scrollTop = scrollTop;\n    document.querySelector(paginateElement).scrollLeft = scrollLeft;\n  });\n} else if (typeof global !== \"undefined\") {\n  global.grab = grab;\n  global.log = log;\n  global.grab.log = [];\n  global.grab.mock = {};\n  global.grab.defaults = {};\n}\n\n/**\n * TODO\n *  - pagination working\n *  - react tests\n *  - progress\n *  - grab error popup and dev tool\n *  - tests in stackblitz\n *  - loading icons\n *  - repeat every\n *  - show net log in alert\n *  - refetch on stale, on window refocus, on network\n *  - scroll position recovery\n */\n"],"names":["result","grab","res"],"mappings":"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"}