{"searchDocs":[{"title":"README","type":0,"sectionRef":"#","url":"/lib/","content":"README ðŸ“‘ Docs (grab.js.org) npm i grab-api.js GRAB: General Request APIs from Browserâ€‹ Data Retrieval: Fetches data from server APIs using JSON parameters and returns JSON responses or error objectsRequest/Response Format: Standardized JSON communication for both input parameters and output dataAutomatic Loading States: Sets isLoading to true during data fetching operations and false upon completionMock Server Support: Configure window.grabMockServer for development and testing environmentsConcurrent Request Handling: Cancels duplicate or overlapping requests automaticallyTimeout Configuration: Customizable request timeout settingsRate Limiting: Built-in rate limiting to prevent API abuseDebug Logging: Comprehensive logging system for request monitoringRequest History: Stores all request and response data in global grabLog objectPagination Support: Built-in pagination handling for large datasetsEnvironment Configuration: Configurable base URLs for development and production environmentsFrontend Caching: Intelligent caching system that prevents redundant API calls for repeat requestsModular Design: Single, flexible function that can be called from any part of your application.Framework Agnostic: No dependency on React hooks or component lifecycle - works with any JavaScript frameworkUniversal Usage: More flexible than TanStack Query - works outside component initialization,Minimalist Single Function: Less boilerplate and complexity than axios, SuperAgent, Got Parametersâ€‹ Parameter\tType\tDescription path string The path in the API after base url response any Pre-initialized object to store the response in, isLoading and error are also set on this object. options? baseURL: string; cache: boolean; cancelIfOngoing: boolean; cancelPrevious: boolean; debug: boolean; method: string; paginateKey: string; paginateResult: string; rateLimit: number; setDefaults: boolean; timeout: number; Request params for GET or POST and more options options.baseURL? string default='/api/' base url prefix, override with SERVER_API_URL env options.cache? boolean default=false Whether to cache the request and from frontend cache options.cancelIfOngoing? boolean default=false Cancel if a request to path is in progress options.cancelPrevious? boolean default=true Cancel previous requests to same path options.debug? boolean default=false Whether to log the request and response options.method? string default=&quot;GET&quot; The HTTP method to use options.paginateKey? string default=&quot;page&quot; The key to paginate the request by options.paginateResult? string default=null The key to paginate result data by options.rateLimit? number default=0 If set, how many seconds to wait between requests options.setDefaults? boolean default=false Pass this with options to set those options as defaults for all requests. options.timeout? number default=20 The timeout for the request in seconds Returnsâ€‹ Promise&lt;any&gt; The response from the server API Authorâ€‹ vtempest (2025) Exampleâ€‹ import {grab} from &quot;./grab-api&quot;; let responseData = $state({}) as { results: Array&lt;{title:string}&gt;, isLoading: boolean, error: string, }; await grab('search', responseData, { query: &quot;search words&quot;, method: 'POST' }) {#if responseData.results} {responseData.results} {:else if responseData.isLoading} ... {:else if responseData.error} {responseData.error} {/if} //Setup Mock testing server, response is object or function window.grabMockServer[&quot;search&quot;] = { response: (params) =&gt; { return { results: [{title:`Result about ${params.query}`}] }; }, method: &quot;POST&quot;, params: { query: &quot;search words&quot; }, delay : 1, }; //set defaults for all requests grab(&quot;&quot;, {}, { setDefaults: true, baseURL: &quot;http://localhost:8080&quot;, timeout: 30, debug: true, rateLimit: 1, cache: true, cancelPrevious: true, cancelIfOngoing: true, }); ","keywords":"","version":"Next"},{"title":"globals","type":0,"sectionRef":"#","url":"/lib/globals","content":"globals grab()â€‹ function grab( path: string, response: any, options?: object): Promise&lt;any&gt;; Defined in: grab-api.js:86 GRAB: General Request APIs from Browserâ€‹ Data Retrieval: Fetches data from server APIs using JSON parameters and returns JSON responses or error objectsRequest/Response Format: Standardized JSON communication for both input parameters and output dataAutomatic Loading States: Sets isLoading to true during data fetching operations and false upon completionMock Server Support: Configure window.grabMockServer for development and testing environmentsConcurrent Request Handling: Cancels duplicate or overlapping requests automaticallyTimeout Configuration: Customizable request timeout settingsRate Limiting: Built-in rate limiting to prevent API abuseDebug Logging: Comprehensive logging system for request monitoringRequest History: Stores all request and response data in global grabLog objectPagination Support: Built-in pagination handling for large datasetsEnvironment Configuration: Configurable base URLs for development and production environmentsFrontend Caching: Intelligent caching system that prevents redundant API calls for repeat requestsModular Design: Single, flexible function that can be called from any part of your application.Framework Agnostic: No dependency on React hooks or component lifecycle - works with any JavaScript frameworkUniversal Usage: More flexible than TanStack Query - works outside component initialization,Minimalist Single Function: Less boilerplate and complexity than axios, SuperAgent, Got, Alova Parametersâ€‹ Parameter\tType\tDescription path string The path in the API after base url response any Pre-initialized object to store the response in, isLoading and error are also set on this object. options? { method: string; cancelPrevious: boolean; cancelIfOngoing: boolean; cache: boolean; debug: boolean; timeout: number; rateLimit: number; paginateResult: string; paginateKey: string; baseURL: string; setDefaults: boolean; } Request params for GET or POST and more options options.method? string default=&quot;GET&quot; The HTTP method to use options.cancelPrevious? boolean default=true Cancel previous requests to same path options.cancelIfOngoing? boolean default=false Cancel if a request to path is in progress options.cache? boolean default=false Whether to cache the request and from frontend cache options.debug? boolean default=false Whether to log the request and response options.timeout? number default=20 The timeout for the request in seconds options.rateLimit? number default=0 If set, how many seconds to wait between requests options.paginateResult? string default=null The key to paginate result data by options.paginateKey? string default=&quot;page&quot; The key to paginate the request by options.baseURL? string default='/api/' base url prefix, override with SERVER_API_URL env options.setDefaults? boolean default=false Pass this with options to set those options as defaults for all requests. Returnsâ€‹ Promise&lt;any&gt; The response from the server API Authorâ€‹ vtempest (2025) Exampleâ€‹ import { grab } from &quot;grab-api.js&quot;; let responseData = $state({}) as { results: Array&lt;{title:string}&gt;, isLoading: boolean, error: string, }; await grab('search', responseData, { query: &quot;search words&quot;, method: 'POST' }) //in svelte component {#if responseData.results} {responseData.results} {:else if responseData.isLoading} ... {:else if responseData.error} {responseData.error} {/if} //Setup Mock testing server, response is object or function window.grabMockServer[&quot;search&quot;] = { response: (params) =&gt; { return { results: [{title:`Result about ${params.query}`}] }; }, method: &quot;POST&quot;, params: { query: &quot;search words&quot; }, delay : 1, }; //set defaults for all requests grab(&quot;&quot;, {}, { setDefaults: true, baseURL: &quot;http://localhost:8080&quot;, timeout: 30, debug: true, rateLimit: 1, cache: true, cancelPrevious: true, cancelIfOngoing: true, }); log()â€‹ function log( message: any, hideInProduction?: boolean, style?: string): void; Defined in: grab-api.js:284 Logs messages to the console with custom styling, showing debug output in development and standard logs in production. Pretty print JSON with description of structure layout. Parametersâ€‹ Parameter\tType\tDefault value\tDescription message any undefined The message to log. If an object is provided, it will be stringified. hideInProduction? boolean undefined default = auto-detects based on hostname. If true, uses console.debug (hidden in production). If false, uses console.log. style? string &quot;color: blue; font-size: 14px;&quot; default=&quot;color: blue; font-size: 15px;&quot;] - CSS style string for the console output. Returnsâ€‹ void printStructureJSON()â€‹ function printStructureJSON(obj: any): string; Defined in: grab-api.js:306 Generates TypeDoc-like string of layout of nested JSON object. Parametersâ€‹ Parameter\tType\tDescription obj any The JSON object to describe. Returnsâ€‹ string A string of the object's structure. Exampleâ€‹ { name: string, age: number, pets: Array&lt;string&gt;} ","keywords":"","version":"Next"}],"options":{"id":"default"}}