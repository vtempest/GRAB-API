{"searchDocs":[{"title":"README","type":0,"sectionRef":"#","url":"/lib/","content":"README ðŸ“‘ Docs (grab.js.org) npm i grab-api.js GRAB: Generate Request to API from Browserâ€‹ function grab( path: string, response: any, options?: object): Promise&lt;any&gt;; Defined in: grab-api.js:86 GRAB: Generate Request to API from Browserâ€‹ One Function: 2Kb min.js less boilerplate complexity than axios, SuperAgent, Tanstack, Alova, SWR, TanStack, apisauceAuto-JSON Convert: Pass parameters and get response or error in JSON, handling other data types as is.Reactive isLoading State: Sets .isLoading=true on the pre-initialized response object so you can show a &quot;Loading...&quot; in any component framework.Mock Server Support: Configure window.grab.server for development and testing environmentsConcurrency Handling: Prevent this request if one is ongoing to same path &amp; params, or cancel the ongoing request.Rate Limiting: Built-in rate limiting to prevent multi-click cascading responses, require to wait seconds between requests.Timeout &amp; Retry: Customizable request timeout, default 20s, and auto-retry on errorDebug Logging: Adds global log() and prints colored JSON structure, response, timing for requests in test.Request History: Stores all request and response data in global grab.log objectPagination Infinite Scroll: Built-in pagination for infinite scroll to auto-load and merge next result page.Base URL Based on Environment: Configure grab.defaults.baseURL once at the top, overide with SERVER_API_URL in .env.Frontend Cache: Set cache headers and retrieve from frontend memory for repeat requests to static data.Modular Design: Single, flexible function that can be called from any part of your application.Framework Agnostic: Alternatives like TanStack work only in component initialization and depend on React &amp; others.Globals: Adds to window in browser or global in Node.js so you only import once: grab(), log(), grab.log, grab.server, grab.defaults Exampleâ€‹ import { grab } from &quot;grab-api.js&quot;; let res = $state({}) as { results: Array&lt;{title:string}&gt;, isLoading: boolean, error: string, }; await grab('search', res, { query: &quot;search words&quot;, method: 'POST' }) //in svelte component {#if res.results} {res.results} {:else if res.isLoading} ... {:else if res.error} {res.error} {/if} //Setup Mock testing server, response is object or function window.grab.server[&quot;search&quot;] = { response: (params) =&gt; { return { results: [{title:`Result about ${params.query}`}] }; }, method: &quot;POST&quot;, params: { query: &quot;search words&quot; }, delay : 1, }; //set defaults for all requests grab(&quot;&quot;, {}, { setDefaults: true, baseURL: &quot;http://localhost:8080&quot;, timeout: 30, debug: true, rateLimit: 1, cache: true, cancelOngoingIfNew: true, cancelNewIfOngoing: false }); Parametersâ€‹ Parameter\tType\tDescription path string The path in the API after base url response any Pre-initialized object to set the , response in. isLoading and error are also set on this object. options? object; Request params for GET or body for POST and utility options options.method? string default=&quot;GET&quot; The HTTP method to use options.cancelOngoingIfNew? boolean default=true Cancel previous requests to same path options.cancelNewIfOngoing? boolean default=false Cancel if a request to path is in progress options.cache? boolean default=false Whether to cache the request and from frontend cache options.debug? boolean default=false Whether to log the request and response options.timeout? number default=20 The timeout for the request in seconds options.rateLimit? number default=0 If set, how many seconds to wait between requests options.paginateResult? string The key to paginate result data by options.paginateKey? string default=&quot;&quot; The key to paginate the request by options.baseURL? string default='/api/' base url prefix, override with SERVER_API_URL env options.setDefaults? boolean default=false Pass this with options to set those options as defaults for all requests. options.onBeforeRequest? Function Set with defaults to modify each request data. Takes and returns in order: path, response, params, fetchParams Returnsâ€‹ Promise&lt;any&gt; The response object with resulting data or .error if error. Authorâ€‹ vtempest (2025)","keywords":"","version":"Next"},{"title":"globals","type":0,"sectionRef":"#","url":"/lib/globals","content":"globals grab()â€‹ function grab( path: string, response: any, options?: object): Promise&lt;any&gt;; Defined in: grab-api.js:86 GRAB: Generate Request to API from Browserâ€‹ One Function: 2Kb min.js less boilerplate complexity than axios, SuperAgent, Tanstack, Alova, SWR, TanStack, apisauceAuto-JSON Convert: Pass parameters and get response or error in JSON, handling other data types as is.Reactive isLoading State: Sets .isLoading=true on the pre-initialized response object so you can show a &quot;Loading...&quot; in any component framework.Mock Server Support: Configure window.grab.server for development and testing environmentsConcurrency Handling: Prevent this request if one is ongoing to same path &amp; params, or cancel the ongoing request.Rate Limiting: Built-in rate limiting to prevent multi-click cascading responses, require to wait seconds between requests.Timeout &amp; Retry: Customizable request timeout, default 20s, and auto-retry on errorDebug Logging: Adds global log() and prints colored JSON structure, response, timing for requests in test.Request History: Stores all request and response data in global grab.log objectPagination Infinite Scroll: Built-in pagination for infinite scroll to auto-load and merge next result page.Base URL Based on Environment: Configure grab.defaults.baseURL once at the top, overide with SERVER_API_URL in .env.Frontend Cache: Set cache headers and retrieve from frontend memory for repeat requests to static data.Modular Design: Single, flexible function that can be called from any part of your application.Framework Agnostic: Alternatives like TanStack work only in component initialization and depend on React &amp; others.Globals: Adds to window in browser or global in Node.js so you only import once: grab(), log(), grab.log, grab.server, grab.defaults Parametersâ€‹ Parameter\tType\tDescription path string The path in the API after base url response any Pre-initialized object to set the , response in. isLoading and error are also set on this object. options? { method: string; cancelOngoingIfNew: boolean; cancelNewIfOngoing: boolean; cache: boolean; debug: boolean; timeout: number; rateLimit: number; paginateResult: string; paginateKey: string; baseURL: string; setDefaults: boolean; onBeforeRequest: Function; } Request params for GET or body for POST and utility options options.method? string default=&quot;GET&quot; The HTTP method to use options.cancelOngoingIfNew? boolean default=true Cancel previous requests to same path options.cancelNewIfOngoing? boolean default=false Cancel if a request to path is in progress options.cache? boolean default=false Whether to cache the request and from frontend cache options.debug? boolean default=false Whether to log the request and response options.timeout? number default=20 The timeout for the request in seconds options.rateLimit? number default=0 If set, how many seconds to wait between requests options.paginateResult? string The key to paginate result data by options.paginateKey? string default=&quot;&quot; The key to paginate the request by options.baseURL? string default='/api/' base url prefix, override with SERVER_API_URL env options.setDefaults? boolean default=false Pass this with options to set those options as defaults for all requests. options.onBeforeRequest? Function Set with defaults to modify each request data. Takes and returns in order: path, response, params, fetchParams Returnsâ€‹ Promise&lt;any&gt; The response object with resulting data or .error if error. Authorâ€‹ vtempest (2025) Exampleâ€‹ import { grab } from &quot;grab-api.js&quot;; let res = $state({}) as { results: Array&lt;{title:string}&gt;, isLoading: boolean, error: string, }; await grab('search', res, { query: &quot;search words&quot;, method: 'POST' }) //in svelte component {#if res.results} {res.results} {:else if res.isLoading} ... {:else if res.error} {res.error} {/if} //Setup Mock testing server, response is object or function window.grab.server[&quot;search&quot;] = { response: (params) =&gt; { return { results: [{title:`Result about ${params.query}`}] }; }, method: &quot;POST&quot;, params: { query: &quot;search words&quot; }, delay : 1, }; //set defaults for all requests grab(&quot;&quot;, {}, { setDefaults: true, baseURL: &quot;http://localhost:8080&quot;, timeout: 30, debug: true, rateLimit: 1, cache: true, cancelOngoingIfNew: true, cancelNewIfOngoing: false }); log()â€‹ function log( message: any, hideInProduction?: boolean, style?: string): void; Defined in: grab-api.js:325 Logs messages to the console with custom styling, showing debug output in development and standard logs in production. Pretty print JSON with description of structure layout. Parametersâ€‹ Parameter\tType\tDefault value\tDescription message any undefined The message to log. If an object is provided, it will be stringified. hideInProduction? boolean undefined default = auto-detects based on hostname. If true, uses console.debug (hidden in production). If false, uses console.log. style? string &quot;color: blue; font-size: 14px;&quot; default=&quot;color: blue; font-size: 15px;&quot;] - CSS style string for the console output. Returnsâ€‹ void printStructureJSON()â€‹ function printStructureJSON(obj: any): string; Defined in: grab-api.js:347 Generates TypeDoc-like string of layout of nested JSON object. Parametersâ€‹ Parameter\tType\tDescription obj any The JSON object to describe. Returnsâ€‹ string A string of the object's structure. Exampleâ€‹ { name: string, age: number, pets: Array&lt;string&gt;} defaultâ€‹ Renames and re-exports grab","keywords":"","version":"Next"}],"options":{"id":"default"}}