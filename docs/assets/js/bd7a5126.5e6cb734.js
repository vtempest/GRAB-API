"use strict";(self.webpackChunkdocusaurus_openapi_typedoc=self.webpackChunkdocusaurus_openapi_typedoc||[]).push([["622"],{16125:function(e,n,s){s.r(n),s.d(n,{frontMatter:()=>o,default:()=>m,contentTitle:()=>i,assets:()=>c,toc:()=>u,metadata:()=>r});var r=JSON.parse('{"id":"guide/Testing","title":"Testing","description":"Testing with Jest","source":"@site/docs/guide/Testing.md","sourceDirName":"guide","slug":"/guide/Testing","permalink":"/guide/Testing","draft":false,"unlisted":false,"editUrl":"https://github.com/vtempest/grab-api.js/blob/main/docs/guide/Testing.md","tags":[],"version":"current","frontMatter":{},"sidebar":"default","previous":{"title":"Performance","permalink":"/guide/Performance"},"next":{"title":"README","permalink":"/lib/"}}'),t=s(74132),a=s(50065);let o={},i=void 0,c={},u=[{value:"Testing with Jest",id:"testing-with-jest",level:2},{value:"Mock Server for Testing",id:"mock-server-for-testing",level:2},{value:"Basic Mock Setup",id:"basic-mock-setup",level:3},{value:"Dynamic Mock Responses",id:"dynamic-mock-responses",level:3}];function l(e){let n={code:"code",h2:"h2",h3:"h3",pre:"pre",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"testing-with-jest",children:"Testing with Jest"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// setup-tests.js\nimport { grab } from 'grab-api.js';\n\n// Setup global mocks for testing\nbeforeEach(() => {\n  // Clear previous mocks\n  grab.mock = {};\n  grab.log = [];\n});\n\n// user.test.js\nimport { grab } from 'grab-api.js';\n\ndescribe('User API', () => {\n  test('should fetch user data', async () => {\n    // Setup mock\n    grab.mock.users = {\n      response: { id: 1, name: 'Test User', email: 'test@example.com' }\n    };\n\n    const result = await grab('users');\n    \n    expect(result.id).toBe(1);\n    expect(result.name).toBe('Test User');\n  });\n\n  test('should handle user creation', async () => {\n    grab.mock.users = {\n      response: (params) => ({\n        id: 123,\n        ...params,\n        created: true\n      }),\n      method: 'POST'\n    };\n\n    const newUser = await grab('users', {\n      method: 'POST',\n      name: 'John Doe',\n      email: 'john@example.com'\n    });\n\n    expect(newUser.name).toBe('John Doe');\n    expect(newUser.created).toBe(true);\n  });\n\n  test('should handle errors', async () => {\n    grab.mock.users = {\n      response: () => {\n        throw new Error('User not found');\n      }\n    };\n\n    const result = await grab('users');\n    expect(result.error).toBe('User not found');\n  });\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"mock-server-for-testing",children:"Mock Server for Testing"}),"\n",(0,t.jsx)(n.h3,{id:"basic-mock-setup",children:"Basic Mock Setup"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Setup mock responses for testing\ngrab.mock.users = {\n  response: [\n    { id: 1, name: 'John Doe', email: 'john@example.com' },\n    { id: 2, name: 'Jane Smith', email: 'jane@example.com' }\n  ],\n  delay: 1 // 1 second delay to simulate network\n};\n\ngrab.mock['products/search'] = {\n  response: (params) => ({\n    results: [\n      { id: 1, name: `Product matching \"${params.query}\"`, price: 29.99 },\n      { id: 2, name: `Another product for \"${params.query}\"`, price: 19.99 }\n    ],\n    total: 2\n  }),\n  method: 'POST',\n  delay: 0.5\n};\n\n// Now your API calls will use mock data\nconst users = await grab('users'); // Returns mock user data\n"})}),"\n",(0,t.jsx)(n.h3,{id:"dynamic-mock-responses",children:"Dynamic Mock Responses"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Mock with conditional responses\ngrab.mock['auth/login'] = {\n  response: (params) => {\n    if (params.email === 'admin@example.com' && params.password === 'admin123') {\n      return {\n        success: true,\n        token: 'mock-jwt-token-12345',\n        user: { id: 1, name: 'Admin User', role: 'admin' }\n      };\n    } else {\n      return {\n        success: false,\n        error: 'Invalid credentials'\n      };\n    }\n  },\n  method: 'POST',\n  delay: 1\n};\n\n// Error simulation\ngrab.mock['users/create'] = {\n  response: (params) => {\n    if (!params.email) {\n      throw new Error('Email is required');\n    }\n    return { id: Date.now(), ...params, created: true };\n  },\n  method: 'POST'\n};\n"})})]})}function m(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},50065:function(e,n,s){s.d(n,{Z:()=>i,a:()=>o});var r=s(39546);let t={},a=r.createContext(t);function o(e){let n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);